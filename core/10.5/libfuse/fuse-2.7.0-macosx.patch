diff -Naur old/README.MacFUSE new/README.MacFUSE
--- old/README.MacFUSE	1969-12-31 16:00:00.000000000 -0800
+++ new/README.MacFUSE	2007-07-05 20:31:07.000000000 -0700
@@ -0,0 +1,7 @@
+MacFUSE Project Page:
+
+http://code.google.com/p/macfuse/
+
+Making a Universal build:
+
+CFLAGS="-D__FreeBSD__=10 -D_POSIX_C_SOURCE=200112L -O -g -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.5.sdk" LDFLAGS="-arch i386 -arch ppc -framework CoreFoundation" ./configure --prefix=/usr/local --disable-dependency-tracking
diff -Naur old/configure new/configure
--- old/configure	2007-07-02 04:49:44.000000000 -0700
+++ new/configure	2007-07-05 20:31:07.000000000 -0700
@@ -11293,7 +11293,8 @@
 fi
 
 
-libfuse_libs="-pthread"
+#libfuse_libs="-pthread"
+libfuse_libs=
 LIBS=
 { echo "$as_me:$LINENO: checking for library containing dlopen" >&5
 echo $ECHO_N "checking for library containing dlopen... $ECHO_C" >&6; }
diff -Naur old/example/fusexmp.c new/example/fusexmp.c
--- old/example/fusexmp.c	2007-05-20 04:05:42.000000000 -0700
+++ new/example/fusexmp.c	2007-07-05 20:31:07.000000000 -0700
@@ -47,8 +47,25 @@
     int res;
 
     res = access(path, mask);
-    if (res == -1)
+    if (res == -1) {
+#if (__FreeBSD__ >= 10)
+        if (errno == ENOENT) {
+            int next_res;
+            struct stat sb;
+            next_res = lstat(path, &sb);
+            if (next_res == 0 && S_ISLNK(sb.st_mode) &&
+                ((sb.st_uid == getuid()) || (geteuid() == 0))) {
+                /*
+                 * The target of the symlink doesn't exist, but the
+                 * symlink itself does. A lame cheap fix here.
+                 */
+                return 0;
+            }
+            return -ENOENT;
+        }
+#endif
         return -errno;
+    }  /* if (res == -1) */
 
     return 0;
 }
@@ -316,7 +333,11 @@
 static int xmp_setxattr(const char *path, const char *name, const char *value,
                         size_t size, int flags)
 {
+#if (__FreeBSD__ >= 10)
+    int res = setxattr(path, name, value, size, 0, flags);
+#else
     int res = lsetxattr(path, name, value, size, flags);
+#endif
     if (res == -1)
         return -errno;
     return 0;
@@ -325,7 +346,11 @@
 static int xmp_getxattr(const char *path, const char *name, char *value,
                     size_t size)
 {
+#if (__FreeBSD__ >= 10)
+    int res = getxattr(path, name, value, size, 0, 0);
+#else
     int res = lgetxattr(path, name, value, size);
+#endif
     if (res == -1)
         return -errno;
     return res;
@@ -333,7 +358,11 @@
 
 static int xmp_listxattr(const char *path, char *list, size_t size)
 {
+#if (__FreeBSD__ >= 10)
+    int res = listxattr(path, list, size, 0);
+#else
     int res = llistxattr(path, list, size);
+#endif
     if (res == -1)
         return -errno;
     return res;
@@ -341,7 +370,11 @@
 
 static int xmp_removexattr(const char *path, const char *name)
 {
+#if (__FreeBSD__ >= 10)
+    int res = removexattr(path, name, 0);
+#else
     int res = lremovexattr(path, name);
+#endif
     if (res == -1)
         return -errno;
     return 0;
diff -Naur old/example/fusexmp_fh.c new/example/fusexmp_fh.c
--- old/example/fusexmp_fh.c	2007-05-20 04:05:43.000000000 -0700
+++ new/example/fusexmp_fh.c	2007-07-05 20:31:07.000000000 -0700
@@ -34,8 +34,9 @@
     int res;
 
     res = lstat(path, stbuf);
-    if (res == -1)
+    if (res == -1) {
         return -errno;
+    }
 
     return 0;
 }
@@ -59,8 +60,25 @@
     int res;
 
     res = access(path, mask);
-    if (res == -1)
+    if (res == -1) {
+#if (__FreeBSD__ >= 10)
+        if (errno == ENOENT) {
+            int next_res;
+            struct stat sb;
+            next_res = lstat(path, &sb);
+            if (next_res == 0 && S_ISLNK(sb.st_mode) &&
+                ((sb.st_uid == getuid()) || (geteuid() == 0))) {
+                /*
+                 * The target of the symlink doesn't exist, but the
+                 * symlink itself does. A lame cheap fix here.
+                 */
+                return 0;
+            }
+            return -ENOENT;
+        }
+#endif
         return -errno;
+    }  /* if (res == -1) */
 
     return 0;
 }
@@ -375,7 +393,11 @@
 static int xmp_setxattr(const char *path, const char *name, const char *value,
                         size_t size, int flags)
 {
+#if (__FreeBSD__ >= 10)
+    int res = setxattr(path, name, value, size, 0, flags);
+#else
     int res = lsetxattr(path, name, value, size, flags);
+#endif
     if (res == -1)
         return -errno;
     return 0;
@@ -384,7 +406,11 @@
 static int xmp_getxattr(const char *path, const char *name, char *value,
                     size_t size)
 {
+#if (__FreeBSD__ >= 10)
+    int res = getxattr(path, name, value, size, 0, 0);
+#else
     int res = lgetxattr(path, name, value, size);
+#endif
     if (res == -1)
         return -errno;
     return res;
@@ -392,7 +418,11 @@
 
 static int xmp_listxattr(const char *path, char *list, size_t size)
 {
+#if (__FreeBSD__ >= 10)
+    int res = listxattr(path, list, size, 0);
+#else
     int res = llistxattr(path, list, size);
+#endif
     if (res == -1)
         return -errno;
     return res;
@@ -400,7 +430,11 @@
 
 static int xmp_removexattr(const char *path, const char *name)
 {
+#if (__FreeBSD__ >= 10)
+    int res = removexattr(path, name, 0);
+#else
     int res = lremovexattr(path, name);
+#endif
     if (res == -1)
         return -errno;
     return 0;
@@ -416,7 +450,20 @@
                        sizeof(fi->lock_owner));
 }
 
+void *
+xmp_init(struct fuse_conn_info *conn)
+{
+    return NULL;
+}
+
+void
+xmp_destroy(void *userdata)
+{
+}
+
 static struct fuse_operations xmp_oper = {
+    .init       = xmp_init,
+    .destroy    = xmp_destroy,
     .getattr	= xmp_getattr,
     .fgetattr	= xmp_fgetattr,
     .access	= xmp_access,
diff -Naur old/fuse.pc.in new/fuse.pc.in
--- old/fuse.pc.in	2006-12-02 05:38:07.000000000 -0800
+++ new/fuse.pc.in	2007-07-05 20:31:07.000000000 -0700
@@ -4,7 +4,7 @@
 includedir=@includedir@
 
 Name: fuse
-Description: Filesystem in Userspace
+Description: File System in User Space (MacFUSE)
 Version: @VERSION@
 Libs: -L${libdir} -lfuse @libfuse_libs@
-Cflags: -I${includedir}/fuse -D_FILE_OFFSET_BITS=64
+Cflags: -I${includedir}/fuse -D__FreeBSD__=10 -D_FILE_OFFSET_BITS=64
diff -Naur old/include/fuse.h new/include/fuse.h
--- old/include/fuse.h	2007-07-02 04:32:15.000000000 -0700
+++ new/include/fuse.h	2007-07-05 23:40:58.000000000 -0700
@@ -817,4 +817,22 @@
 }
 #endif
 
+#if (__FreeBSD__ >= 10)
+
+#define LIBFUSE_BUNDLE_IDENTIFIER "com.google.filesystems.libfuse"
+
+#define LIBFUSE_UNOTIFICATIONS_OBJECT                 \
+    LIBFUSE_BUNDLE_IDENTIFIER ".unotifications"
+
+#define LIBFUSE_UNOTIFICATIONS_NOTIFY_OSISTOONEW      \
+    LIBFUSE_BUNDLE_IDENTIFIER ".osistoonew"
+
+#define LIBFUSE_UNOTIFICATIONS_NOTIFY_OSISTOOOLD      \
+    LIBFUSE_BUNDLE_IDENTIFIER ".osistooold"
+
+#define LIBFUSE_UNOTIFICATIONS_NOTIFY_VERSIONMISMATCH \
+    LIBFUSE_BUNDLE_IDENTIFIER ".versionmismatch"
+
+#endif
+
 #endif /* _FUSE_H_ */
diff -Naur old/lib/Makefile.in new/lib/Makefile.in
--- old/lib/Makefile.in	2007-07-02 04:49:57.000000000 -0700
+++ new/lib/Makefile.in	2007-07-05 20:31:07.000000000 -0700
@@ -62,8 +62,12 @@
 	modules/subdir.c modules/iconv.c mount.c mount_util.c \
 	mount_util.h mount_bsd.c
 @ICONV_TRUE@am__objects_1 = iconv.lo
+ifeq (@host_vendor@, apple)
+am__objects_1 = mount_bsd.lo
+else
 @BSD_FALSE@am__objects_2 = mount.lo mount_util.lo
 @BSD_TRUE@am__objects_2 = mount_bsd.lo
+endif
 am_libfuse_la_OBJECTS = fuse.lo fuse_kern_chan.lo fuse_loop.lo \
 	fuse_loop_mt.lo fuse_lowlevel.lo fuse_mt.lo fuse_opt.lo \
 	fuse_session.lo fuse_signals.lo helper.lo subdir.lo \
@@ -209,8 +213,12 @@
  -D_FILE_OFFSET_BITS=64 -D_REENTRANT -DFUSE_USE_VERSION=26
 
 lib_LTLIBRARIES = libfuse.la libulockmgr.la
+ifeq (@host_vendor@, apple)
+mount_source = mount_bsd.c
+else
 @BSD_FALSE@mount_source = mount.c mount_util.c mount_util.h
 @BSD_TRUE@mount_source = mount_bsd.c
+endif
 @ICONV_FALSE@iconv_source = 
 @ICONV_TRUE@iconv_source = modules/iconv.c
 libfuse_la_SOURCES = \
@@ -230,8 +238,12 @@
 	$(iconv_source)		\
 	$(mount_source)
 
+ifeq ($(host_vendor), apple)
+libfuse_la_LDFLAGS = @libfuse_libs@
+else
 libfuse_la_LDFLAGS = @libfuse_libs@ -version-number 2:7:0 \
 	-Wl,--version-script,$(srcdir)/fuse_versionscript
+endif
 
 libulockmgr_la_SOURCES = ulockmgr.c
 libulockmgr_la_LDFLAGS = -version-number 1:0:1
diff -Naur old/lib/fuse.c new/lib/fuse.c
--- old/lib/fuse.c	2007-07-02 04:33:08.000000000 -0700
+++ new/lib/fuse.c	2007-07-05 20:31:07.000000000 -0700
@@ -1172,6 +1172,16 @@
 
 static void curr_time(struct timespec *now)
 {
+#if (__FreeBSD__ >= 10)
+#define MACFUSE_TIMEVAL_TO_TIMESPEC(tv, ts) {                           \
+        (ts)->tv_sec = (tv)->tv_sec;                                    \
+        (ts)->tv_nsec = (tv)->tv_usec * 1000;                           \
+    }
+    struct timeval tp;
+    gettimeofday(&tp, NULL);
+    /* XXX: TBD: We are losing resolution here. */
+    MACFUSE_TIMEVAL_TO_TIMESPEC(&tp, now);
+#else
     static clockid_t clockid = CLOCK_MONOTONIC;
     int res = clock_gettime(clockid, now);
     if (res == -1 && errno == EINVAL) {
@@ -1182,6 +1192,7 @@
         perror("fuse: clock_gettime");
         abort();
     }
+#endif
 }
 
 static void update_stat(struct node *node, const struct stat *stbuf)
@@ -3289,12 +3300,14 @@
                                   sizeof(struct fuse_operations_compat1), 11);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_exited,__fuse_exited@");
 __asm__(".symver fuse_process_cmd,__fuse_process_cmd@");
 __asm__(".symver fuse_read_cmd,__fuse_read_cmd@");
 __asm__(".symver fuse_set_getcontext_func,__fuse_set_getcontext_func@");
 __asm__(".symver fuse_new_compat2,fuse_new@");
 __asm__(".symver fuse_new_compat22,fuse_new@FUSE_2.2");
+#endif
 
 #endif /* __FreeBSD__ */
 
@@ -3306,4 +3319,6 @@
                                     op_size, 25);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_new_compat25,fuse_new@FUSE_2.5");
+#endif
diff -Naur old/lib/fuse_kern_chan.c new/lib/fuse_kern_chan.c
--- old/lib/fuse_kern_chan.c	2007-05-20 04:05:46.000000000 -0700
+++ new/lib/fuse_kern_chan.c	2007-07-05 20:31:07.000000000 -0700
@@ -75,9 +75,23 @@
     return 0;
 }
 
+#if (__FreeBSD__ >= 10)
+
+#include <sys/ioctl.h>
+
+/* should include <common/fuse_ioctl.h> for this */
+#define FUSEDEVIOCDAEMONISDYING       _IOW('F', 3,  u_int32_t)
+#endif
+
 static void fuse_kern_chan_destroy(struct fuse_chan *ch)
 {
+#if (__FreeBSD__ >= 10)
+    int fd = fuse_chan_fd(ch);
+    (void)ioctl(fd, FUSEDEVIOCDAEMONISDYING, &fd);
+    close(fd);
+#else
     close(fuse_chan_fd(ch));
+#endif
 }
 
 #define MIN_BUFSIZE 0x21000
diff -Naur old/lib/fuse_lowlevel.c new/lib/fuse_lowlevel.c
--- old/lib/fuse_lowlevel.c	2007-07-02 04:32:17.000000000 -0700
+++ new/lib/fuse_lowlevel.c	2007-07-05 20:31:07.000000000 -0700
@@ -1407,9 +1407,11 @@
     return 0;
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_reply_statfs_compat,fuse_reply_statfs@FUSE_2.4");
 __asm__(".symver fuse_reply_open_compat,fuse_reply_open@FUSE_2.4");
 __asm__(".symver fuse_lowlevel_new_compat,fuse_lowlevel_new@FUSE_2.4");
+#endif
 
 #else /* __FreeBSD__ */
 
@@ -1433,4 +1435,6 @@
                                     op_size, userdata);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_lowlevel_new_compat25,fuse_lowlevel_new@FUSE_2.5");
+#endif
diff -Naur old/lib/fuse_mt.c new/lib/fuse_mt.c
--- old/lib/fuse_mt.c	2007-04-25 09:14:26.000000000 -0700
+++ new/lib/fuse_mt.c	2007-07-05 20:31:07.000000000 -0700
@@ -112,4 +112,6 @@
     return fuse_session_loop_mt(fuse_get_session(f));
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_loop_mt_proc,__fuse_loop_mt@");
+#endif
diff -Naur old/lib/fuse_session.c new/lib/fuse_session.c
--- old/lib/fuse_session.c	2007-04-25 09:14:26.000000000 -0700
+++ new/lib/fuse_session.c	2007-07-05 20:31:07.000000000 -0700
@@ -15,6 +15,9 @@
 #include <string.h>
 #include <assert.h>
 #include <errno.h>
+#if (__FreeBSD__ >= 10)
+#include <sys/param.h>
+#endif
 
 struct fuse_session {
     struct fuse_session_ops op;
@@ -24,6 +27,10 @@
     volatile int exited;
 
     struct fuse_chan *ch;
+
+#if (__FreeBSD__ >= 10)
+    char mntonname[MAXPATHLEN];
+#endif
 };
 
 struct fuse_chan {
@@ -40,6 +47,30 @@
     int compat;
 };
 
+#if (__FreeBSD__ >= 10)
+char *fuse_session_get_mntonname(struct fuse_session *se)
+{
+    if (se) {
+        return se->mntonname;
+    }
+
+    return NULL;
+}
+
+void fuse_session_set_mntonname(struct fuse_session *se, char *mntonname)
+{
+    if (!se || !mntonname) {
+        return;
+    }
+
+    if (!realpath(mntonname, se->mntonname)) {
+        memset(se->mntonname, 0, MAXPATHLEN);
+    }
+
+    return;
+}
+#endif
+
 struct fuse_session *fuse_session_new(struct fuse_session_ops *op, void *data)
 {
     struct fuse_session *se = (struct fuse_session *) malloc(sizeof(*se));
diff -Naur old/lib/fuse_signals.c new/lib/fuse_signals.c
--- old/lib/fuse_signals.c	2007-04-25 09:14:26.000000000 -0700
+++ new/lib/fuse_signals.c	2007-07-05 20:31:07.000000000 -0700
@@ -13,12 +13,34 @@
 #include <signal.h>
 
 static struct fuse_session *fuse_instance;
+#if (__FreeBSD__ >= 10)
+extern char *fuse_session_get_mntonname(struct fuse_session *se);
+
+#include <unistd.h>
+#endif
 
 static void exit_handler(int sig)
 {
     (void) sig;
+#if (__FreeBSD__ >= 10)
+    if (fuse_instance && !fuse_session_exited(fuse_instance)) {
+        int fd;
+        pid_t pid;
+
+        fd = fuse_chan_fd(fuse_session_next_chan(fuse_instance, NULL));
+        pid = fork();
+        if (pid == 0) { /* child */
+             char *mntonname = fuse_session_get_mntonname(fuse_instance);
+             fcntl(fd, F_SETFD, 1); /* close-on-exec */
+             execl("/sbin/umount", "/sbin/umount", mntonname, NULL);
+        } else {
+            /* We do nothing in the parent. */
+        }
+    }
+#else
     if (fuse_instance)
         fuse_session_exit(fuse_instance);
+#endif
 }
 
 static int set_one_signal_handler(int sig, void (*handler)(int))
diff -Naur old/lib/helper.c new/lib/helper.c
--- old/lib/helper.c	2007-07-02 04:32:17.000000000 -0700
+++ new/lib/helper.c	2007-07-05 20:31:07.000000000 -0700
@@ -259,6 +259,10 @@
     if (fd)
         *fd = fuse_chan_fd(ch);
 
+#if (__FreeBSD__ >= 10)
+    fuse_session_set_mntonname(fuse_get_session(fuse), *mountpoint);
+#endif
+
     return fuse;
 
  err_unmount:
@@ -390,11 +394,13 @@
     return fuse_mount_compat22(mountpoint, NULL);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_setup_compat2,__fuse_setup@");
 __asm__(".symver fuse_setup_compat22,fuse_setup@FUSE_2.2");
 __asm__(".symver fuse_teardown,__fuse_teardown@");
 __asm__(".symver fuse_main_compat2,fuse_main@");
 __asm__(".symver fuse_main_real_compat22,fuse_main_real@FUSE_2.2");
+#endif
 
 #endif /* __FreeBSD__ */
 
@@ -427,7 +433,9 @@
     return fuse_kern_mount(mountpoint, args);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_setup_compat25,fuse_setup@FUSE_2.5");
 __asm__(".symver fuse_teardown_compat22,fuse_teardown@FUSE_2.2");
 __asm__(".symver fuse_main_real_compat25,fuse_main_real@FUSE_2.5");
 __asm__(".symver fuse_mount_compat25,fuse_mount@FUSE_2.5");
+#endif
diff -Naur old/lib/mount.c new/lib/mount.c
--- old/lib/mount.c	2007-07-02 04:32:17.000000000 -0700
+++ new/lib/mount.c	2007-07-05 20:31:07.000000000 -0700
@@ -579,5 +579,7 @@
     return res;
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_mount_compat22,fuse_mount@FUSE_2.2");
 __asm__(".symver fuse_unmount_compat22,fuse_unmount@FUSE_2.2");
+#endif
diff -Naur old/lib/mount_bsd.c new/lib/mount_bsd.c
--- old/lib/mount_bsd.c	2006-05-03 07:46:04.000000000 -0700
+++ new/lib/mount_bsd.c	2007-07-05 23:41:52.000000000 -0700
@@ -6,6 +6,12 @@
     See the file COPYING.LIB.
 */
 
+#if (__FreeBSD__ >= 10)
+#undef _POSIX_C_SOURCE
+#include <sys/types.h>
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 #include "fuse_i.h"
 #include "fuse_opt.h"
 
@@ -21,8 +27,184 @@
 #include <string.h>
 #include <paths.h>
 
+#if (__FreeBSD__ >= 10)
+
+#include <libproc.h>
+#include <sys/utsname.h>
+
+#define FUSERMOUNT_PROG  "/System/Library/Filesystems/fusefs.fs/Support/mount_fusefs"
+#define FUSE_DEV_TRUNK   "/dev/fuse"
+#define PRIVATE_LOAD_COMMAND "/System/Library/Filesystems/fusefs.fs/Support/load_fusefs"
+
+#include <sys/param.h>
+#include <sys/mount.h>
+#include <AssertMacros.h>
+
+static const char *MacFUSE = "MacFUSE version 0.5.0, " __DATE__ ", " __TIME__;
+static int quiet_mode = 0;
+
+static long
+os_version_major(void)
+{
+    int ret = 0;
+    long major = 0;
+    char *c = NULL;
+    struct utsname u;
+    size_t oldlen;
+
+    oldlen = sizeof(u.release);
+
+    ret = sysctlbyname("kern.osrelease", u.release, &oldlen, NULL, 0);
+    if (ret != 0) {
+        return -1;
+    }
+
+    c = strchr(u.release, '.');
+    if (c == NULL) {
+        return -1;
+    }
+
+    *c = '\0';
+
+    major = strtol(u.release, NULL, 10);
+    if ((errno == EINVAL) || (errno == ERANGE)) {
+        return -1;
+    }
+
+    return major;
+}
+
+__unused static int
+checkloadable_unused(void)
+{
+    int ret;
+    struct vfsconf vfc;
+    
+    ret = getvfsbyname("fusefs", &vfc);
+    
+    return ret;
+}   
+
+static int
+checkloadable(void)
+{
+    return 1; /* load_fusefs will take care of checking */
+}
+
+int
+loadkmod()
+{
+    int result = -1;
+    int pid, terminated_pid;
+    union wait status;
+    long major;
+
+    major = os_version_major();
+
+    if (major < 9) { /* not Mac OS X 10.5+ */
+        return EINVAL;
+    }
+
+    pid = fork();
+
+    if (pid == 0) {
+        result = execl(PRIVATE_LOAD_COMMAND, PRIVATE_LOAD_COMMAND, NULL);
+        
+        /* exec failed */
+        goto Return;
+    }
+
+    require_action(pid != -1, Return, result = errno);
+
+    while ((terminated_pid = wait4(pid, (int *)&status, 0, NULL)) < 0) {
+        /* retry if EINTR, else break out with error */
+        if (errno != EINTR) {
+            break;
+        }
+    }
+
+    if ((terminated_pid == pid) && (WIFEXITED(status))) {
+        result = WEXITSTATUS(status);
+    } else {
+        result = -1;
+    }
+
+Return:
+    check_noerr_string(result, strerror(errno));
+    
+    return result;
+}
+
+static int
+post_notification(char   *name,
+                  char   *udata_keys[],
+                  char   *udata_values[],
+                  CFIndex nf_num)
+{
+    CFIndex i;
+    CFStringRef nf_name   = NULL;
+    CFStringRef nf_object = NULL;
+    CFMutableDictionaryRef nf_udata  = NULL;
+
+    CFNotificationCenterRef distributedCenter;
+    CFStringEncoding encoding = kCFStringEncodingASCII;
+
+    distributedCenter = CFNotificationCenterGetDistributedCenter();
+
+    if (!distributedCenter) {
+        return -1;
+    }
+
+    nf_name = CFStringCreateWithCString(kCFAllocatorDefault, name, encoding);
+      
+    nf_object = CFStringCreateWithCString(kCFAllocatorDefault,
+                                          LIBFUSE_UNOTIFICATIONS_OBJECT,
+                                          encoding);
+ 
+    nf_udata = CFDictionaryCreateMutable(kCFAllocatorDefault,
+                                         nf_num,
+                                         &kCFCopyStringDictionaryKeyCallBacks,
+                                         &kCFTypeDictionaryValueCallBacks);
+
+    if (!nf_name || !nf_object || !nf_udata) {
+        goto out;
+    }
+
+    for (i = 0; i < nf_num; i++) {
+        CFStringRef a_key = CFStringCreateWithCString(kCFAllocatorDefault,
+                                                      udata_keys[i],
+                                                      kCFStringEncodingASCII);
+        CFStringRef a_value = CFStringCreateWithCString(kCFAllocatorDefault,
+                                                        udata_values[i],
+                                                        kCFStringEncodingASCII);
+        CFDictionarySetValue(nf_udata, a_key, a_value);
+        CFRelease(a_key);
+        CFRelease(a_value);
+    }
+
+    CFNotificationCenterPostNotification(distributedCenter,
+                                         nf_name, nf_object, nf_udata, false);
+
+out:
+    if (nf_name) {
+        CFRelease(nf_name);
+    }
+
+    if (nf_object) {
+        CFRelease(nf_object);
+    }
+
+    if (nf_udata) {
+        CFRelease(nf_udata);
+    }
+
+    return 0;
+}
+
+#else
 #define FUSERMOUNT_PROG         "mount_fusefs"
 #define FUSE_DEV_TRUNK          "/dev/fuse"
+#endif
 
 enum {
     KEY_ALLOW_ROOT,
@@ -30,6 +212,11 @@
     KEY_HELP,
     KEY_VERSION,
     KEY_KERN
+#if (__FreeBSD__ >= 10)
+    ,
+    KEY_DIO,
+    KEY_QUIET,
+#endif
 };
 
 struct mount_opts {
@@ -108,11 +295,46 @@
     FUSE_OPT_KEY("noprivate",           KEY_KERN),
     FUSE_OPT_KEY("noneglect_shares",    KEY_KERN),
     FUSE_OPT_KEY("nopush_symlinks_in",  KEY_KERN),
+#if (__FreeBSD__ >= 10)
+    /* Mac OS X options */
+    FUSE_OPT_KEY("allow_recursion",     KEY_KERN),
+    FUSE_OPT_KEY("allow_root",          KEY_KERN), /* need to pass this on */
+    FUSE_OPT_KEY("blocksize=",          KEY_KERN),
+    FUSE_OPT_KEY("daemon_timeout=",     KEY_KERN),
+    FUSE_OPT_KEY("defer_auth",          KEY_KERN),
+    FUSE_OPT_KEY("direct_io",           KEY_DIO),
+    FUSE_OPT_KEY("extended_security",   KEY_KERN),
+    FUSE_OPT_KEY("fsid=",               KEY_KERN),
+    FUSE_OPT_KEY("fsname=",             KEY_KERN),
+    FUSE_OPT_KEY("fssubtype=",          KEY_KERN),
+    FUSE_OPT_KEY("init_timeout=",       KEY_KERN),
+    FUSE_OPT_KEY("iosize=",             KEY_KERN),
+    FUSE_OPT_KEY("jail_symlinks",       KEY_KERN),
+    FUSE_OPT_KEY("kill_on_unmount",     KEY_KERN),
+    FUSE_OPT_KEY("noalerts",            KEY_KERN),
+    FUSE_OPT_KEY("noapplespecial",      KEY_KERN),
+    FUSE_OPT_KEY("noattrcache",         KEY_KERN),
+    FUSE_OPT_KEY("noauthopaque",        KEY_KERN),
+    FUSE_OPT_KEY("noauthopaqueaccess",  KEY_KERN),
+    FUSE_OPT_KEY("nobrowse",            KEY_KERN),
+    FUSE_OPT_KEY("nolocalcaches",       KEY_KERN),
+    FUSE_OPT_KEY("noping_diskarb",      KEY_KERN),
+    FUSE_OPT_KEY("noreadahead",         KEY_KERN),
+    FUSE_OPT_KEY("nosynconclose",       KEY_KERN),
+    FUSE_OPT_KEY("nosyncwrites",        KEY_KERN),
+    FUSE_OPT_KEY("noubc",               KEY_KERN),
+    FUSE_OPT_KEY("novncache",           KEY_KERN),
+    FUSE_OPT_KEY("ping_diskarb",        KEY_KERN),
+    FUSE_OPT_KEY("quiet",               KEY_QUIET),
+    FUSE_OPT_KEY("subtype=",            KEY_KERN),
+    FUSE_OPT_KEY("volname=",            KEY_KERN),
+#else
     /* Linux specific mount options, but let just the mount util handle them */
     FUSE_OPT_KEY("fsname=",             KEY_KERN),
     FUSE_OPT_KEY("nonempty",            KEY_KERN),
     FUSE_OPT_KEY("large_read",          KEY_KERN),
     FUSE_OPT_KEY("max_read=",           KEY_KERN),
+#endif
     FUSE_OPT_END
 };
 
@@ -149,6 +371,18 @@
     case KEY_KERN:
         return fuse_opt_add_opt(&mo->kernel_opts, arg);
 
+#if (__FreeBSD__ >= 10)
+    case KEY_DIO:
+          if (fuse_opt_add_opt(&mo->kernel_opts, "direct_io") == -1 ||
+              (fuse_opt_add_arg(outargs, "-odirect_io") == -1))
+            return -1;
+        return 0;
+
+    case KEY_QUIET:
+        quiet_mode = 1;
+        return 0;
+#endif
+
     case KEY_HELP:
         mount_help();
         mo->ishelp = 1;
@@ -199,8 +433,21 @@
     if (rv)
         return;
 
+#if (__FreeBSD__ >= 10)
+    {
+        int ret;
+        char *rp = NULL;
+        char resolved_path[PATH_MAX];
+
+        rp = realpath(mountpoint, resolved_path);
+        if (rp) {
+            ret = unmount(resolved_path, 0);
+        }
+    }
+#else
     asprintf(&umount_cmd, "/sbin/umount %s", dev);
     system(umount_cmd);
+#endif
 }
 
 void fuse_kern_unmount(const char *mountpoint, int fd)
@@ -222,8 +469,21 @@
     if (*ep != '\0')
         return;
 
+#if (__FreeBSD__ >= 10)
+    {
+        int ret;
+        char *rp = NULL;
+        char resolved_path[PATH_MAX];
+
+        rp = realpath(mountpoint, resolved_path);
+        if (rp) {
+            ret = unmount(resolved_path, 0);
+        }
+    }
+#else
     asprintf(&umount_cmd, "/sbin/umount " _PATH_DEV "%s", dev);
     system(umount_cmd);
+#endif
 }
 
 /* Check if kernel is doing init in background */
@@ -233,8 +493,13 @@
 
     len = sizeof(ibg);
 
+#if (__FreeBSD__ >= 10)
+    if (sysctlbyname("macfuse.tunables.init_backgrounded", &ibg, (size_t *)&len, NULL, 0))
+        return 0;
+#else
     if (sysctlbyname("vfs.fuse.init_backgrounded", &ibg, &len, NULL, 0))
         return 0;
+#endif
 
     return ibg;
 }
@@ -246,6 +511,56 @@
     int fd;
     char *fdnam, *dev;
     int pid;
+#if (__FreeBSD__ >= 10)
+    int ibg = 0;
+
+    if (!mountpoint) {
+        fprintf(stderr, "missing or invalid mount point\n");
+        return -1;
+    }
+
+    if (checkloadable()) {
+        int result = loadkmod();
+        if (result) {
+            CFOptionFlags responseFlags;
+            if (result == EINVAL) {
+                if (!quiet_mode) {
+                    CFUserNotificationDisplayNotice(
+                        (CFTimeInterval)0,
+                        kCFUserNotificationCautionAlertLevel,
+                        (CFURLRef)0,
+                        (CFURLRef)0,
+                        (CFURLRef)0,
+                        CFSTR("Operating System Too Old"),
+                        CFSTR("The installed MacFUSE version is too new for the operating system version. Please downgrade your MacFUSE installation to one that is compatible with the currently running operating system."),
+                        CFSTR("OK")
+                    );
+                }
+                post_notification(
+                    LIBFUSE_UNOTIFICATIONS_NOTIFY_OSISTOOOLD,
+                    NULL, NULL, 0);
+            } else if (result == EBUSY) {
+                if (!quiet_mode) {
+                    CFUserNotificationDisplayNotice(
+                        (CFTimeInterval)0,
+                        kCFUserNotificationCautionAlertLevel,
+                        (CFURLRef)0,
+                        (CFURLRef)0,
+                        (CFURLRef)0,
+                        CFSTR("MacFUSE Version Mismatch"),
+                        CFSTR("MacFUSE has been updated but an incompatible or old version of the MacFUSE kernel extension is already loaded. It failed to unload, possibly because a MacFUSE volume is currently mounted.\n\nPlease eject all MacFUSE volumes and try again, or simply restart the system for changes to take effect."),
+                        CFSTR("OK")
+                    );
+                }
+                post_notification(LIBFUSE_UNOTIFICATIONS_NOTIFY_VERSIONMISMATCH,
+                                  NULL, NULL, 0);
+            }
+            fprintf(stderr, "fusefs file system is not available (%d)\n",
+                    result);
+            return -1;
+        }
+    }
+#endif
 
     fdnam = getenv("FUSE_DEV_FD");
 
@@ -267,19 +582,40 @@
 
     dev = getenv("FUSE_DEV_NAME");
 
-    if (! dev)
-	dev = FUSE_DEV_TRUNK;
-
-    if ((fd = open(dev, O_RDWR)) < 0) {
-        perror("fuse: failed to open fuse device");
-        return -1;
+    if (dev) {
+        if ((fd = open(dev, O_RDWR)) < 0) {
+            perror("fuse: failed to open fuse device");
+            return -1;
+        }
+    } else {
+#define NFUSEDEVICE 16
+        int r, devidx = -1;
+        char devpath[MAXPATHLEN];
+
+        for (r = 0; r < NFUSEDEVICE; r++) {
+            snprintf(devpath, MAXPATHLEN - 1, "/dev/fuse%d", r);
+            fd = open(devpath, O_RDWR);
+            if (fd >= 0) {
+                dev = devpath;
+                devidx = r;
+                break;
+            }
+        }
+        if (devidx == -1) {
+            perror("fuse: failed to open fuse device");
+            return -1;
+        }
     }
 
 mount:
     if (getenv("FUSE_NO_MOUNT") || ! mountpoint)
         goto out;
 
+#if (__FreeBSD__ >= 10)
+    pid = vfork();
+#else
     pid = fork();
+#endif
 
     if (pid == -1) {
         perror("fuse: fork() failed");
@@ -287,8 +623,16 @@
         return -1;
     }
 
+#if (__FreeBSD__ >= 10)
+    ibg = init_backgrounded();
+#endif
+
     if (pid == 0) {
+#if (__FreeBSD__ >= 10)
+        if (!ibg) {
+#else
         if (! init_backgrounded()) {
+#endif
             /*
              * If init is not backgrounded, we have to call the mount util
              * backgrounded, to avoid deadlock.
@@ -318,15 +662,49 @@
             argv[a++] = fdnam;
             argv[a++] = mountpoint;
             argv[a++] = NULL;
+
+#if (__FreeBSD__ >= 10)
+            {
+                char title[MAXPATHLEN + 1] = { 0 };
+                u_int32_t len = MAXPATHLEN;
+                int ret = proc_pidpath(getpid(), title, len);
+                if (ret) {
+                    setenv("MOUNT_FUSEFS_DAEMON_PATH", title, 1);
+                }
+            }
+#endif
+
             execvp(mountprog, (char **) argv);
             perror("fuse: failed to exec mount program");
             exit(1);
         }
+#if (__FreeBSD__ >= 10)
+        else {
+            if (ibg) {
+                int status;
+                waitpid(pid, &status, 0);
+                if (WIFEXITED(status) && (WEXITSTATUS(status) != 0)) {
+                    exit(WEXITSTATUS(status));
+                }
+            }
+        }
+#endif
 
         exit(0);
     }
 
+#if (__FreeBSD__ >= 10)
+    {
+        int status;
+
+        waitpid(pid, &status, 0);
+        if (WIFEXITED(status) && (WEXITSTATUS(status) != 0)) {
+            exit(WEXITSTATUS(status));
+        }
+    }
+#else
     waitpid(pid, NULL, 0);
+#endif
 
 out:
     return fd;
@@ -360,4 +738,6 @@
     return res;
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_unmount_compat22,fuse_unmount@FUSE_2.2");
+#endif
diff -Naur old/lib/ulockmgr.c new/lib/ulockmgr.c
--- old/lib/ulockmgr.c	2007-07-02 04:32:17.000000000 -0700
+++ new/lib/ulockmgr.c	2007-07-05 20:31:07.000000000 -0700
@@ -18,9 +18,19 @@
 #include <assert.h>
 #include <signal.h>
 #include <sys/stat.h>
+#if (__FreeBSD__ >= 10)
+#undef _POSIX_C_SOURCE
 #include <sys/socket.h>
+#define _POSIX_C_SOURCE 200112L
+#else
+#include <sys/socket.h>
+#endif
 #include <sys/wait.h>
 
+#if (__FreeBSD__ >= 10)
+#define MSG_NOSIGNAL 0
+#endif
+
 struct message {
     unsigned intr : 1;
     unsigned nofd : 1;
@@ -140,6 +150,13 @@
         return -1;
     }
     ulockmgr_cfd = sv[1];
+#if (__FreeBSD__ >= 10)
+    {
+        int on = 1;
+        res = setsockopt(ulockmgr_cfd, SOL_SOCKET, SO_NOSIGPIPE, (void *)&on,
+                         sizeof(on));
+    }
+#endif
     return 0;
 }
 
diff -Naur old/run_configure.sh new/run_configure.sh
--- old/run_configure.sh	1969-12-31 16:00:00.000000000 -0800
+++ new/run_configure.sh	2007-07-05 20:31:07.000000000 -0700
@@ -0,0 +1 @@
+CFLAGS="-D__FreeBSD__=10 -D_POSIX_C_SOURCE=200112L -O -g -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.5.sdk" LDFLAGS="-arch i386 -arch ppc -framework CoreFoundation" ./configure --prefix=/usr/local --disable-dependency-tracking
