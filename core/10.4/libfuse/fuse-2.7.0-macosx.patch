diff -Naur old/README.MacFUSE new/README.MacFUSE
--- old/README.MacFUSE	1969-12-31 16:00:00.000000000 -0800
+++ new/README.MacFUSE	2007-07-14 00:39:24.000000000 -0700
@@ -0,0 +1,7 @@
+MacFUSE Project Page:
+
+http://code.google.com/p/macfuse/
+
+Making a Universal build:
+
+CFLAGS="-D__FreeBSD__=10 -D_POSIX_C_SOURCE=200112L -O -g -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.4u.sdk" LDFLAGS="-arch i386 -arch ppc -framework CoreFoundation" ./configure --prefix=/usr/local --disable-dependency-tracking
diff -Naur old/configure new/configure
--- old/configure	2007-07-02 04:49:44.000000000 -0700
+++ new/configure	2007-07-14 00:39:24.000000000 -0700
@@ -11293,7 +11293,8 @@
 fi
 
 
-libfuse_libs="-pthread"
+#libfuse_libs="-pthread"
+libfuse_libs=
 LIBS=
 { echo "$as_me:$LINENO: checking for library containing dlopen" >&5
 echo $ECHO_N "checking for library containing dlopen... $ECHO_C" >&6; }
diff -Naur old/example/fusexmp.c new/example/fusexmp.c
--- old/example/fusexmp.c	2007-05-20 04:05:42.000000000 -0700
+++ new/example/fusexmp.c	2007-07-14 00:39:24.000000000 -0700
@@ -47,8 +47,25 @@
     int res;
 
     res = access(path, mask);
-    if (res == -1)
+    if (res == -1) {
+#if (__FreeBSD__ >= 10)
+        if (errno == ENOENT) {
+            int next_res;
+            struct stat sb;
+            next_res = lstat(path, &sb);
+            if (next_res == 0 && S_ISLNK(sb.st_mode) &&
+                ((sb.st_uid == getuid()) || (geteuid() == 0))) {
+                /*
+                 * The target of the symlink doesn't exist, but the
+                 * symlink itself does. A lame cheap fix here.
+                 */
+                return 0;
+            }
+            return -ENOENT;
+        }
+#endif
         return -errno;
+    }  /* if (res == -1) */
 
     return 0;
 }
@@ -316,7 +333,11 @@
 static int xmp_setxattr(const char *path, const char *name, const char *value,
                         size_t size, int flags)
 {
+#if (__FreeBSD__ >= 10)
+    int res = setxattr(path, name, value, size, 0, flags);
+#else
     int res = lsetxattr(path, name, value, size, flags);
+#endif
     if (res == -1)
         return -errno;
     return 0;
@@ -325,7 +346,11 @@
 static int xmp_getxattr(const char *path, const char *name, char *value,
                     size_t size)
 {
+#if (__FreeBSD__ >= 10)
+    int res = getxattr(path, name, value, size, 0, 0);
+#else
     int res = lgetxattr(path, name, value, size);
+#endif
     if (res == -1)
         return -errno;
     return res;
@@ -333,7 +358,11 @@
 
 static int xmp_listxattr(const char *path, char *list, size_t size)
 {
+#if (__FreeBSD__ >= 10)
+    int res = listxattr(path, list, size, 0);
+#else
     int res = llistxattr(path, list, size);
+#endif
     if (res == -1)
         return -errno;
     return res;
@@ -341,7 +370,11 @@
 
 static int xmp_removexattr(const char *path, const char *name)
 {
+#if (__FreeBSD__ >= 10)
+    int res = removexattr(path, name, 0);
+#else
     int res = lremovexattr(path, name);
+#endif
     if (res == -1)
         return -errno;
     return 0;
diff -Naur old/example/fusexmp_fh.c new/example/fusexmp_fh.c
--- old/example/fusexmp_fh.c	2007-05-20 04:05:43.000000000 -0700
+++ new/example/fusexmp_fh.c	2007-07-14 00:39:24.000000000 -0700
@@ -34,8 +34,9 @@
     int res;
 
     res = lstat(path, stbuf);
-    if (res == -1)
+    if (res == -1) {
         return -errno;
+    }
 
     return 0;
 }
@@ -59,8 +60,25 @@
     int res;
 
     res = access(path, mask);
-    if (res == -1)
+    if (res == -1) {
+#if (__FreeBSD__ >= 10)
+        if (errno == ENOENT) {
+            int next_res;
+            struct stat sb;
+            next_res = lstat(path, &sb);
+            if (next_res == 0 && S_ISLNK(sb.st_mode) &&
+                ((sb.st_uid == getuid()) || (geteuid() == 0))) {
+                /*
+                 * The target of the symlink doesn't exist, but the
+                 * symlink itself does. A lame cheap fix here.
+                 */
+                return 0;
+            }
+            return -ENOENT;
+        }
+#endif
         return -errno;
+    }  /* if (res == -1) */
 
     return 0;
 }
@@ -375,7 +393,11 @@
 static int xmp_setxattr(const char *path, const char *name, const char *value,
                         size_t size, int flags)
 {
+#if (__FreeBSD__ >= 10)
+    int res = setxattr(path, name, value, size, 0, flags);
+#else
     int res = lsetxattr(path, name, value, size, flags);
+#endif
     if (res == -1)
         return -errno;
     return 0;
@@ -384,7 +406,11 @@
 static int xmp_getxattr(const char *path, const char *name, char *value,
                     size_t size)
 {
+#if (__FreeBSD__ >= 10)
+    int res = getxattr(path, name, value, size, 0, 0);
+#else
     int res = lgetxattr(path, name, value, size);
+#endif
     if (res == -1)
         return -errno;
     return res;
@@ -392,7 +418,11 @@
 
 static int xmp_listxattr(const char *path, char *list, size_t size)
 {
+#if (__FreeBSD__ >= 10)
+    int res = listxattr(path, list, size, 0);
+#else
     int res = llistxattr(path, list, size);
+#endif
     if (res == -1)
         return -errno;
     return res;
@@ -400,7 +430,11 @@
 
 static int xmp_removexattr(const char *path, const char *name)
 {
+#if (__FreeBSD__ >= 10)
+    int res = removexattr(path, name, 0);
+#else
     int res = lremovexattr(path, name);
+#endif
     if (res == -1)
         return -errno;
     return 0;
@@ -416,7 +450,20 @@
                        sizeof(fi->lock_owner));
 }
 
+void *
+xmp_init(struct fuse_conn_info *conn)
+{
+    return NULL;
+}
+
+void
+xmp_destroy(void *userdata)
+{
+}
+
 static struct fuse_operations xmp_oper = {
+    .init       = xmp_init,
+    .destroy    = xmp_destroy,
     .getattr	= xmp_getattr,
     .fgetattr	= xmp_fgetattr,
     .access	= xmp_access,
diff -Naur old/fuse.pc.in new/fuse.pc.in
--- old/fuse.pc.in	2006-12-02 05:38:07.000000000 -0800
+++ new/fuse.pc.in	2007-07-14 00:39:24.000000000 -0700
@@ -4,7 +4,7 @@
 includedir=@includedir@
 
 Name: fuse
-Description: Filesystem in Userspace
+Description: File System in User Space (MacFUSE)
 Version: @VERSION@
 Libs: -L${libdir} -lfuse @libfuse_libs@
-Cflags: -I${includedir}/fuse -D_FILE_OFFSET_BITS=64
+Cflags: -I${includedir}/fuse -D__FreeBSD__=10 -D_FILE_OFFSET_BITS=64
diff -Naur old/include/fuse.h new/include/fuse.h
--- old/include/fuse.h	2007-07-02 04:32:15.000000000 -0700
+++ new/include/fuse.h	2007-07-14 00:39:24.000000000 -0700
@@ -817,4 +817,22 @@
 }
 #endif
 
+#if (__FreeBSD__ >= 10)
+
+#define LIBFUSE_BUNDLE_IDENTIFIER "com.google.filesystems.libfuse"
+
+#define LIBFUSE_UNOTIFICATIONS_OBJECT                 \
+    LIBFUSE_BUNDLE_IDENTIFIER ".unotifications"
+
+#define LIBFUSE_UNOTIFICATIONS_NOTIFY_OSISTOONEW      \
+    LIBFUSE_BUNDLE_IDENTIFIER ".osistoonew"
+
+#define LIBFUSE_UNOTIFICATIONS_NOTIFY_OSISTOOOLD      \
+    LIBFUSE_BUNDLE_IDENTIFIER ".osistooold"
+
+#define LIBFUSE_UNOTIFICATIONS_NOTIFY_VERSIONMISMATCH \
+    LIBFUSE_BUNDLE_IDENTIFIER ".versionmismatch"
+
+#endif
+
 #endif /* _FUSE_H_ */
diff -Naur old/lib/Makefile.in new/lib/Makefile.in
--- old/lib/Makefile.in	2007-07-02 04:49:57.000000000 -0700
+++ new/lib/Makefile.in	2007-07-14 00:39:24.000000000 -0700
@@ -61,13 +61,23 @@
 	fuse_mt.c fuse_opt.c fuse_session.c fuse_signals.c helper.c \
 	modules/subdir.c modules/iconv.c mount.c mount_util.c \
 	mount_util.h mount_bsd.c
+ifeq (@host_vendor@, apple)
+am__libfuse_la_SOURCES_DIST += modules/volicon.c
+endif
 @ICONV_TRUE@am__objects_1 = iconv.lo
+ifeq (@host_vendor@, apple)
+am__objects_1 = mount_bsd.lo
+else
 @BSD_FALSE@am__objects_2 = mount.lo mount_util.lo
 @BSD_TRUE@am__objects_2 = mount_bsd.lo
+endif
 am_libfuse_la_OBJECTS = fuse.lo fuse_kern_chan.lo fuse_loop.lo \
 	fuse_loop_mt.lo fuse_lowlevel.lo fuse_mt.lo fuse_opt.lo \
 	fuse_session.lo fuse_signals.lo helper.lo subdir.lo \
 	$(am__objects_1) $(am__objects_2)
+ifeq (@host_vendor@, apple)
+am_libfuse_la_OBJECTS += volicon.lo
+endif
 libfuse_la_OBJECTS = $(am_libfuse_la_OBJECTS)
 libulockmgr_la_LIBADD =
 am_libulockmgr_la_OBJECTS = ulockmgr.lo
@@ -209,8 +219,12 @@
  -D_FILE_OFFSET_BITS=64 -D_REENTRANT -DFUSE_USE_VERSION=26
 
 lib_LTLIBRARIES = libfuse.la libulockmgr.la
+ifeq (@host_vendor@, apple)
+mount_source = mount_bsd.c
+else
 @BSD_FALSE@mount_source = mount.c mount_util.c mount_util.h
 @BSD_TRUE@mount_source = mount_bsd.c
+endif
 @ICONV_FALSE@iconv_source = 
 @ICONV_TRUE@iconv_source = modules/iconv.c
 libfuse_la_SOURCES = \
@@ -230,8 +244,13 @@
 	$(iconv_source)		\
 	$(mount_source)
 
+ifeq ($(host_vendor), apple)
+libfuse_la_SOURCES += modules/volicon.c
+libfuse_la_LDFLAGS = @libfuse_libs@
+else
 libfuse_la_LDFLAGS = @libfuse_libs@ -version-number 2:7:0 \
 	-Wl,--version-script,$(srcdir)/fuse_versionscript
+endif
 
 libulockmgr_la_SOURCES = ulockmgr.c
 libulockmgr_la_LDFLAGS = -version-number 1:0:1
@@ -323,6 +342,9 @@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/mount_util.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/subdir.Plo@am__quote@
 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ulockmgr.Plo@am__quote@
+ifeq (@host_vendor@, apple)
+@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/volicon.Plo@am__quote@
+endif
 
 .c.o:
 @am__fastdepCC_TRUE@	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
@@ -359,6 +381,15 @@
 @AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
 @am__fastdepCC_FALSE@	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o iconv.lo `test -f 'modules/iconv.c' || echo '$(srcdir)/'`modules/iconv.c
 
+ifeq (@host_vendor@, apple)
+volicon.lo: modules/volicon.c
+@am__fastdepCC_TRUE@	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT volicon.lo -MD -MP -MF "$(DEPDIR)/volicon.Tpo" -c -o volicon.lo `test -f 'modules/volicon.c' || echo '$(srcdir)/'`modules/volicon.c; \
+@am__fastdepCC_TRUE@	then mv -f "$(DEPDIR)/volicon.Tpo" "$(DEPDIR)/volicon.Plo"; else rm -f "$(DEPDIR)/volicon.Tpo"; exit 1; fi
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	source='modules/volicon.c' object='volicon.lo' libtool=yes @AMDEPBACKSLASH@
+@AMDEP_TRUE@@am__fastdepCC_FALSE@	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@
+@am__fastdepCC_FALSE@	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o volicon.lo `test -f 'modules/volicon.c' || echo '$(srcdir)/'`modules/volicon.c
+endif
+
 mostlyclean-libtool:
 	-rm -f *.lo
 
diff -Naur old/lib/fuse.c new/lib/fuse.c
--- old/lib/fuse.c	2007-07-02 04:33:08.000000000 -0700
+++ new/lib/fuse.c	2007-07-14 00:39:24.000000000 -0700
@@ -1172,6 +1172,16 @@
 
 static void curr_time(struct timespec *now)
 {
+#if (__FreeBSD__ >= 10)
+#define MACFUSE_TIMEVAL_TO_TIMESPEC(tv, ts) {                           \
+        (ts)->tv_sec = (tv)->tv_sec;                                    \
+        (ts)->tv_nsec = (tv)->tv_usec * 1000;                           \
+    }
+    struct timeval tp;
+    gettimeofday(&tp, NULL);
+    /* XXX: TBD: We are losing resolution here. */
+    MACFUSE_TIMEVAL_TO_TIMESPEC(&tp, now);
+#else
     static clockid_t clockid = CLOCK_MONOTONIC;
     int res = clock_gettime(clockid, now);
     if (res == -1 && errno == EINVAL) {
@@ -1182,6 +1192,7 @@
         perror("fuse: clock_gettime");
         abort();
     }
+#endif
 }
 
 static void update_stat(struct node *node, const struct stat *stbuf)
@@ -3289,12 +3300,14 @@
                                   sizeof(struct fuse_operations_compat1), 11);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_exited,__fuse_exited@");
 __asm__(".symver fuse_process_cmd,__fuse_process_cmd@");
 __asm__(".symver fuse_read_cmd,__fuse_read_cmd@");
 __asm__(".symver fuse_set_getcontext_func,__fuse_set_getcontext_func@");
 __asm__(".symver fuse_new_compat2,fuse_new@");
 __asm__(".symver fuse_new_compat22,fuse_new@FUSE_2.2");
+#endif
 
 #endif /* __FreeBSD__ */
 
@@ -3306,4 +3319,6 @@
                                     op_size, 25);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_new_compat25,fuse_new@FUSE_2.5");
+#endif
diff -Naur old/lib/fuse_lowlevel.c new/lib/fuse_lowlevel.c
--- old/lib/fuse_lowlevel.c	2007-07-02 04:32:17.000000000 -0700
+++ new/lib/fuse_lowlevel.c	2007-07-14 00:39:24.000000000 -0700
@@ -1407,9 +1407,11 @@
     return 0;
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_reply_statfs_compat,fuse_reply_statfs@FUSE_2.4");
 __asm__(".symver fuse_reply_open_compat,fuse_reply_open@FUSE_2.4");
 __asm__(".symver fuse_lowlevel_new_compat,fuse_lowlevel_new@FUSE_2.4");
+#endif
 
 #else /* __FreeBSD__ */
 
@@ -1433,4 +1435,6 @@
                                     op_size, userdata);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_lowlevel_new_compat25,fuse_lowlevel_new@FUSE_2.5");
+#endif
diff -Naur old/lib/fuse_mt.c new/lib/fuse_mt.c
--- old/lib/fuse_mt.c	2007-04-25 09:14:26.000000000 -0700
+++ new/lib/fuse_mt.c	2007-07-14 00:39:24.000000000 -0700
@@ -112,4 +112,6 @@
     return fuse_session_loop_mt(fuse_get_session(f));
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_loop_mt_proc,__fuse_loop_mt@");
+#endif
diff -Naur old/lib/fuse_session.c new/lib/fuse_session.c
--- old/lib/fuse_session.c	2007-04-25 09:14:26.000000000 -0700
+++ new/lib/fuse_session.c	2007-07-14 00:39:24.000000000 -0700
@@ -15,6 +15,9 @@
 #include <string.h>
 #include <assert.h>
 #include <errno.h>
+#if (__FreeBSD__ >= 10)
+#include <sys/param.h>
+#endif
 
 struct fuse_session {
     struct fuse_session_ops op;
@@ -24,6 +27,10 @@
     volatile int exited;
 
     struct fuse_chan *ch;
+
+#if (__FreeBSD__ >= 10)
+    char mntonname[MAXPATHLEN];
+#endif
 };
 
 struct fuse_chan {
@@ -40,6 +47,30 @@
     int compat;
 };
 
+#if (__FreeBSD__ >= 10)
+char *fuse_session_get_mntonname(struct fuse_session *se)
+{
+    if (se) {
+        return se->mntonname;
+    }
+
+    return NULL;
+}
+
+void fuse_session_set_mntonname(struct fuse_session *se, char *mntonname)
+{
+    if (!se || !mntonname) {
+        return;
+    }
+
+    if (!realpath(mntonname, se->mntonname)) {
+        memset(se->mntonname, 0, MAXPATHLEN);
+    }
+
+    return;
+}
+#endif
+
 struct fuse_session *fuse_session_new(struct fuse_session_ops *op, void *data)
 {
     struct fuse_session *se = (struct fuse_session *) malloc(sizeof(*se));
diff -Naur old/lib/fuse_signals.c new/lib/fuse_signals.c
--- old/lib/fuse_signals.c	2007-04-25 09:14:26.000000000 -0700
+++ new/lib/fuse_signals.c	2007-07-14 00:39:24.000000000 -0700
@@ -13,12 +13,34 @@
 #include <signal.h>
 
 static struct fuse_session *fuse_instance;
+#if (__FreeBSD__ >= 10)
+extern char *fuse_session_get_mntonname(struct fuse_session *se);
+
+#include <unistd.h>
+#endif
 
 static void exit_handler(int sig)
 {
     (void) sig;
+#if (__FreeBSD__ >= 10)
+    if (fuse_instance && !fuse_session_exited(fuse_instance)) {
+        int fd;
+        pid_t pid;
+
+        fd = fuse_chan_fd(fuse_session_next_chan(fuse_instance, NULL));
+        pid = fork();
+        if (pid == 0) { /* child */
+             char *mntonname = fuse_session_get_mntonname(fuse_instance);
+             fcntl(fd, F_SETFD, 1); /* close-on-exec */
+             execl("/sbin/umount", "/sbin/umount", mntonname, NULL);
+        } else {
+            /* We do nothing in the parent. */
+        }
+    }
+#else
     if (fuse_instance)
         fuse_session_exit(fuse_instance);
+#endif
 }
 
 static int set_one_signal_handler(int sig, void (*handler)(int))
diff -Naur old/lib/helper.c new/lib/helper.c
--- old/lib/helper.c	2007-07-02 04:32:17.000000000 -0700
+++ new/lib/helper.c	2007-07-14 00:43:24.000000000 -0700
@@ -218,6 +218,18 @@
     fuse_unmount_common(mountpoint, ch);
 }
 
+#if (__FreeBSD__ >= 10)
+#include <sys/param.h>
+
+static char recorded_mountpoint[MAXPATHLEN] = { 0 };
+
+const char *
+fuse_get_mountpoint(void)
+{
+    return &(recorded_mountpoint[0]);
+}
+#endif
+
 static struct fuse *fuse_setup_common(int argc, char *argv[],
                                       const struct fuse_operations *op,
                                       size_t op_size,
@@ -243,6 +255,12 @@
         goto err_free;
     }
 
+#if (__FreeBSD__ >= 10)
+    if (*mountpoint) {
+        strncpy(recorded_mountpoint, *mountpoint, MAXPATHLEN);
+    }
+#endif
+
     fuse = fuse_new_common(ch, &args, op, op_size, user_data, compat);
     fuse_opt_free_args(&args);
     if (fuse == NULL)
@@ -259,6 +277,10 @@
     if (fd)
         *fd = fuse_chan_fd(ch);
 
+#if (__FreeBSD__ >= 10)
+    fuse_session_set_mntonname(fuse_get_session(fuse), *mountpoint);
+#endif
+
     return fuse;
 
  err_unmount:
@@ -390,11 +412,13 @@
     return fuse_mount_compat22(mountpoint, NULL);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_setup_compat2,__fuse_setup@");
 __asm__(".symver fuse_setup_compat22,fuse_setup@FUSE_2.2");
 __asm__(".symver fuse_teardown,__fuse_teardown@");
 __asm__(".symver fuse_main_compat2,fuse_main@");
 __asm__(".symver fuse_main_real_compat22,fuse_main_real@FUSE_2.2");
+#endif
 
 #endif /* __FreeBSD__ */
 
@@ -427,7 +451,9 @@
     return fuse_kern_mount(mountpoint, args);
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_setup_compat25,fuse_setup@FUSE_2.5");
 __asm__(".symver fuse_teardown_compat22,fuse_teardown@FUSE_2.2");
 __asm__(".symver fuse_main_real_compat25,fuse_main_real@FUSE_2.5");
 __asm__(".symver fuse_mount_compat25,fuse_mount@FUSE_2.5");
+#endif
diff -Naur old/lib/modules/volicon.c new/lib/modules/volicon.c
--- old/lib/modules/volicon.c	1969-12-31 16:00:00.000000000 -0800
+++ new/lib/modules/volicon.c	2007-07-14 00:44:22.000000000 -0700
@@ -0,0 +1,789 @@
+/*
+ *  Custom volume icon support for MacFUSE.
+ *
+ *  - libfuse stack module by Andrew de los Reyes <adlr@google>
+ *  - Based on "volicon" code by Amit Singh <singh@>
+ *
+ *  This program can be distributed under the terms of the GNU LGPL.
+ *  See the file COPYING.LIB for details.
+ */
+
+#define FUSE_USE_VERSION 26
+
+#undef _POSIX_C_SOURCE
+#include <sys/types.h>
+#define _POSIX_C_SOURCE 200112L
+#include <sys/attr.h>
+#include <sys/vnode.h>
+#include <fuse.h>
+#include <libgen.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stddef.h>
+#include <string.h>
+#include <unistd.h>
+#include <errno.h>
+
+#include <crt_externs.h>
+
+#define VOLICON_DOTUDOT_MAGIC_PATH "/._."
+#define VOLICON_ICON_MAGIC_PATH    "/.VolumeIcon.icns"
+#define VOLICON_ICON_MAXSIZE       (1024 * 1024)
+
+#define VOLICON_CREATOR            0x46555345 /* FUSE */
+#define VOLICON_TYPE_ROOT          0x524f4f54 /* ROOT */
+
+static int FinderInfoSet(const char *path, uint32_t *type, uint32_t *creator);
+static int FinderInfoGet(const char *path, uint32_t *type, uint32_t *creator);
+
+static const char dotudot_data[] = {
+     0x00, 0x05, 0x16, 0x07, 0x00, 0x02, 0x00, 0x00,
+     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+     0x00, 0x02, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00,
+     0x00, 0x32, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00,
+     0x00, 0x02, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00,
+     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+     0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
+     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+     0x00, 0x00                                                        
+};
+#define DOTUDOT_DATA_LEN (sizeof(dotudot_data)/sizeof(dotudot_data[0]))
+
+struct volicon {
+    struct fuse_fs *next;
+
+    char *volicon;
+    char *volicon_data;
+    off_t volicon_size;
+    uid_t volicon_uid;
+    const char *mntpath;
+};
+
+static struct volicon *
+volicon_get(void)
+{
+    return fuse_get_context()->private_data;
+}
+
+static __inline__ int
+volicon_is_icon_magic_file(const char *path)
+{
+    return (!strcmp(path, VOLICON_ICON_MAGIC_PATH));
+}
+
+static __inline__ int
+volicon_is_dotudot_magic_file(const char *path)
+{
+    return (!strcmp(path, VOLICON_DOTUDOT_MAGIC_PATH));
+}
+
+#define volicon_is_a_magic_file(p) volicon_is_icon_magic_file(p)
+
+#define ERROR_IF_MAGIC_FILE(path, e)     \
+    if (volicon_is_a_magic_file(path)) { \
+        return -e;                       \
+    }
+
+/*
+ * FUSE API Operations
+ * Listed in the same order as in struct fuse_operations in <fuse.h>
+ */
+
+static int
+volicon_getattr(const char *path, struct stat *buf)
+{
+    int res = 0;
+
+    if (volicon_is_icon_magic_file(path)) {
+
+        memset((void *)buf, 0, sizeof(struct stat));
+
+        buf->st_mode  = S_IFREG | 0444;
+        buf->st_nlink = 1;
+        buf->st_uid   = volicon_get()->volicon_uid;
+        buf->st_gid = 0;
+        buf->st_size  = volicon_get()->volicon_size;
+        buf->st_atime = buf->st_ctime = buf->st_mtime = time(NULL);
+
+    } else {
+        res = fuse_fs_getattr(volicon_get()->next, path, buf);
+    }
+
+    return res;
+}
+
+static int
+volicon_readlink(const char *path, char *buf, size_t size)
+{
+    ERROR_IF_MAGIC_FILE(path, EINVAL);
+
+    return fuse_fs_readlink(volicon_get()->next, path, buf, size);
+}
+
+static int
+volicon_getdir(const char *path, struct fuse_dirhandle *dh,
+               fuse_dirfil_t filler_old)
+{
+    ERROR_IF_MAGIC_FILE(path, ENOTDIR);
+
+    return fuse_fs_getdir(volicon_get()->next, path, dh, filler_old);
+}
+
+static int
+volicon_mknod(const char *path, mode_t mode, dev_t rdev)
+{
+    ERROR_IF_MAGIC_FILE(path, EEXIST);
+
+    return fuse_fs_mknod(volicon_get()->next, path, mode, rdev);
+}
+
+static int
+volicon_mkdir(const char *path, mode_t mode)
+{
+    ERROR_IF_MAGIC_FILE(path, EEXIST);
+
+    return fuse_fs_mkdir(volicon_get()->next, path, mode);
+}
+
+static int
+volicon_unlink(const char *path)
+{
+    ERROR_IF_MAGIC_FILE(path, EACCES);
+
+    return fuse_fs_unlink(volicon_get()->next, path);
+}
+
+static int
+volicon_rmdir(const char *path)
+{
+    ERROR_IF_MAGIC_FILE(path, ENOTDIR);
+
+    return fuse_fs_rmdir(volicon_get()->next, path);
+}
+
+static int
+volicon_symlink(const char *from, const char *path)
+{
+    ERROR_IF_MAGIC_FILE(path, EEXIST);
+
+    return fuse_fs_symlink(volicon_get()->next, from, path);
+}
+
+static int volicon_rename(const char *from, const char *to)
+{
+    ERROR_IF_MAGIC_FILE(from, EACCES);
+    ERROR_IF_MAGIC_FILE(to, EACCES);
+
+    return fuse_fs_rename(volicon_get()->next, from, to);
+}
+
+static int
+volicon_link(const char *from, const char *to)
+{
+    ERROR_IF_MAGIC_FILE(from, EACCES);
+    ERROR_IF_MAGIC_FILE(to, EACCES);
+
+    return fuse_fs_link(volicon_get()->next, from, to);
+}
+
+static int
+volicon_chmod(const char *path, mode_t mode)
+{
+    ERROR_IF_MAGIC_FILE(path, EACCES);
+
+    return fuse_fs_chmod(volicon_get()->next, path, mode);
+}
+
+static int
+volicon_chown(const char *path, uid_t uid, gid_t gid)
+{
+    ERROR_IF_MAGIC_FILE(path, EACCES);
+
+    return fuse_fs_chown(volicon_get()->next, path, uid, gid);
+}
+
+static int
+volicon_truncate(const char *path, off_t size)
+{
+    ERROR_IF_MAGIC_FILE(path, EACCES);
+
+    return fuse_fs_truncate(volicon_get()->next, path, size);
+}
+
+static int
+volicon_utime(const char *path, struct utimbuf *buf)
+{
+    ERROR_IF_MAGIC_FILE(path, EACCES);
+
+    return fuse_fs_utime(volicon_get()->next, path, buf);
+}
+
+static int
+volicon_open(const char *path, struct fuse_file_info *fi)
+{
+    if (volicon_is_a_magic_file(path)) {
+        if (fi && ((fi->flags & O_ACCMODE) != O_RDONLY)) {
+            return -EACCES;
+        }
+
+        return 0;
+    }
+
+    return fuse_fs_open(volicon_get()->next, path, fi);
+}
+
+static int
+volicon_read(const char *path, char *buf, size_t size, off_t off,
+             struct fuse_file_info *fi)
+{
+    int res = 0;
+
+    if (volicon_is_icon_magic_file(path)) {
+        size_t a_size = size;
+        if (off < volicon_get()->volicon_size) {
+            if ((off + size) > volicon_get()->volicon_size) {
+                a_size = volicon_get()->volicon_size - off;
+            }
+            memcpy(buf, (char *)(volicon_get()->volicon_data) + off, a_size);
+            res = a_size;
+        }
+    } else {
+        res = fuse_fs_read(volicon_get()->next, path, buf, size, off, fi);
+    }
+
+    return res;
+}
+
+static int
+volicon_write(const char *path, const char *buf, size_t size, off_t off,
+              struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, EACCES);
+
+    return fuse_fs_write(volicon_get()->next, path, buf, size, off, fi);
+}
+
+static int
+volicon_statfs(const char *path, struct statvfs *stbuf)
+{
+    if (volicon_is_a_magic_file(path)) {
+        return fuse_fs_statfs(volicon_get()->next, "/", stbuf);
+    }
+
+    return fuse_fs_statfs(volicon_get()->next, path, stbuf);
+}
+
+static int
+volicon_flush(const char *path, struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, 0);
+
+    return fuse_fs_flush(volicon_get()->next, path, fi);
+}
+
+static int
+volicon_release(const char *path, struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, 0);
+
+    return fuse_fs_release(volicon_get()->next, path, fi);
+}
+
+static int
+volicon_fsync(const char *path, int isdatasync,
+                        struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, 0);
+
+    return fuse_fs_fsync(volicon_get()->next, path, isdatasync, fi);
+}
+
+static int
+volicon_setxattr(const char *path, const char *name, const char *value,
+                 size_t size, int flags)
+{
+    ERROR_IF_MAGIC_FILE(path, EPERM);
+
+    return fuse_fs_setxattr(volicon_get()->next, path, name, value, size,
+                            flags);
+}
+
+static int
+volicon_getxattr(const char *path, const char *name, char *value, size_t size)
+{
+    ERROR_IF_MAGIC_FILE(path, EPERM);
+
+    return fuse_fs_getxattr(volicon_get()->next, path, name, value, size);
+}
+
+static int
+volicon_listxattr(const char *path, char *list, size_t size)
+{
+    ERROR_IF_MAGIC_FILE(path, EPERM);
+
+    return fuse_fs_listxattr(volicon_get()->next, path, list, size);
+}
+
+static int
+volicon_removexattr(const char *path, const char *name)
+{
+    ERROR_IF_MAGIC_FILE(path, EPERM);
+
+    return fuse_fs_removexattr(volicon_get()->next, path, name);
+}
+
+static int
+volicon_opendir(const char *path, struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, ENOTDIR);
+
+    return fuse_fs_opendir(volicon_get()->next, path, fi);
+}
+
+static int
+volicon_readdir(const char *path, void *buf, fuse_fill_dir_t filler,
+                off_t offset, struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, ENOTDIR);
+
+    return fuse_fs_readdir(volicon_get()->next, path, buf, filler, offset, fi);
+}
+
+static int
+volicon_releasedir(const char *path, struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, ENOTDIR);
+
+    return fuse_fs_releasedir(volicon_get()->next, path, fi);
+}
+
+static int
+volicon_fsyncdir(const char *path, int isdatasync, struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, ENOTDIR);
+
+    return fuse_fs_fsyncdir(volicon_get()->next, path, isdatasync, fi);
+}
+
+static void *
+volicon_init(struct fuse_conn_info *conn)
+{
+    struct volicon *d = volicon_get();
+
+    fuse_fs_init(d->next, conn);
+
+    return d;
+}
+
+static void
+volicon_destroy(void *data)
+{
+    struct volicon *d = data;
+
+    fuse_fs_destroy(d->next);
+
+    {
+        int ret;
+        size_t len;
+        char *p1, *p2;
+        char dot_path[MAXPATHLEN + 1];
+        uint32_t type, creator;
+
+        if (!d->volicon) {
+            return;
+        }
+
+        len = strlen(d->mntpath) + 2;
+        p1 = dirname(d->mntpath);
+        p2 = basename(d->mntpath);
+        if (!p1 || !p2 || (len > MAXPATHLEN)) {
+            return;
+        }
+
+        ret = snprintf(dot_path, MAXPATHLEN + 1, "%s/._%s", p1, p2);
+        if (ret != len) {
+            return;
+        }
+
+        ret = FinderInfoGet(dot_path, &type, &creator);
+        if (ret) {
+            return;
+        }
+
+        if ((creator == 'FUSE') && (type == 'ROOT')) {
+            (void)unlink(dot_path);
+        }
+    }
+
+    free(d->volicon);
+    free(d->volicon_data);
+
+    /* free(d->mntpath); */
+
+    free(d);
+
+    return;
+}
+
+static int
+volicon_access(const char *path, int mask)
+{
+    if (volicon_is_a_magic_file(path)) {
+        if ((mask & W_OK) || (mask & X_OK)) {
+            return -EACCES;
+        }
+
+        return 1;
+    }
+
+    return fuse_fs_access(volicon_get()->next, path, mask);
+}
+
+static int
+volicon_create(const char *path, mode_t mode, struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, EEXIST);
+
+    return fuse_fs_create(volicon_get()->next, path, mode, fi);
+}
+
+static int
+volicon_ftruncate(const char *path, off_t size, struct fuse_file_info *fi)
+{
+    ERROR_IF_MAGIC_FILE(path, EACCES);
+
+    return fuse_fs_ftruncate(volicon_get()->next, path, size, fi);
+}
+
+static int
+volicon_fgetattr(const char *path, struct stat *buf, struct fuse_file_info *fi)
+{
+    int res = 0;
+
+    if (volicon_is_icon_magic_file(path)) {
+
+        memset((void *)buf, 0, sizeof(struct stat));
+
+        buf->st_mode  = S_IFREG | 0444;
+        buf->st_nlink = 1;
+        buf->st_uid   = volicon_get()->volicon_uid;
+        buf->st_gid = 0;
+        buf->st_size  = volicon_get()->volicon_size;
+        buf->st_atime = buf->st_ctime = buf->st_mtime = time(NULL);
+
+    } else {
+        res = fuse_fs_fgetattr(volicon_get()->next, path, buf, fi);
+    }
+
+    return res;
+}
+
+static int
+volicon_lock(const char *path, struct fuse_file_info *fi, int cmd,
+             struct flock *lock)
+{
+    ERROR_IF_MAGIC_FILE(path, ENOTSUP);
+
+    return fuse_fs_lock(volicon_get()->next, path, fi, cmd, lock);
+}
+
+static int
+volicon_utimens(const char *path, const struct timespec ts[2])
+{
+    ERROR_IF_MAGIC_FILE(path, EACCES);
+
+    return fuse_fs_utimens(volicon_get()->next, path, ts);
+}
+
+static int
+volicon_bmap(const char *path, size_t blocksize, uint64_t *idx)
+{
+    ERROR_IF_MAGIC_FILE(path, ENOTSUP);
+
+    return fuse_fs_bmap(volicon_get()->next, path, blocksize, idx);
+}
+
+/*
+ * Listed in the same order as in struct fuse_operations in <fuse.h>
+ */
+static struct fuse_operations volicon_oper = {
+    .getattr     = volicon_getattr,
+    .readlink    = volicon_readlink,
+    .getdir      = volicon_getdir,
+    .mknod       = volicon_mknod,
+    .mkdir       = volicon_mkdir,
+    .unlink      = volicon_unlink,
+    .rmdir       = volicon_rmdir,
+    .symlink     = volicon_symlink,
+    .rename      = volicon_rename,
+    .link        = volicon_link,
+    .chmod       = volicon_chmod,
+    .chown       = volicon_chown,
+    .truncate    = volicon_truncate,
+    .utime       = volicon_utime,
+    .open        = volicon_open,
+    .read        = volicon_read,
+    .write       = volicon_write,
+    .statfs      = volicon_statfs,
+    .flush       = volicon_flush,
+    .release     = volicon_release,
+    .fsync       = volicon_fsync,
+    .setxattr    = volicon_setxattr,
+    .getxattr    = volicon_getxattr,
+    .listxattr   = volicon_listxattr,
+    .removexattr = volicon_removexattr,
+    .opendir     = volicon_opendir,
+    .readdir     = volicon_readdir,
+    .releasedir  = volicon_releasedir,
+    .fsyncdir    = volicon_fsyncdir,
+    .init        = volicon_init,
+    .destroy     = volicon_destroy,
+    .access      = volicon_access,
+    .create      = volicon_create,
+    .ftruncate   = volicon_ftruncate,
+    .fgetattr    = volicon_fgetattr,
+    .lock        = volicon_lock,
+    .utimens     = volicon_utimens,
+    .bmap        = volicon_bmap,
+};
+
+static struct fuse_opt volicon_opts[] = {
+    FUSE_OPT_KEY("-h", 0),
+    FUSE_OPT_KEY("--help", 0),
+    { "volicon=%s", offsetof(struct volicon, volicon), 0 },
+    FUSE_OPT_END
+};
+
+static void
+volicon_help(void)
+{
+    fprintf(stderr,
+            "    -o volicon=<icon file> display volume with custom icon\n");
+}
+
+static int
+volicon_opt_proc(void *data, const char *arg, int key,
+                 struct fuse_args *outargs)
+{
+    (void)data;
+    (void)arg;
+    (void)outargs;
+
+    if (!key) {
+        volicon_help();
+        return -1;
+    }
+
+    return 1;
+}
+
+typedef struct attrlist attrlist_t;
+
+struct FinderInfoAttrBuf {
+    unsigned long length;
+    fsobj_type_t  objType;
+    char          finderInfo[32];
+};
+typedef struct FinderInfoAttrBuf FinderInfoAttrBuf;
+
+static struct fuse_fs *
+volicon_new(struct fuse_args *args, struct fuse_fs *next[])
+{
+    int ret;
+    int voliconfd = -1;
+    struct stat sb;
+    struct fuse_fs *fs;
+    struct volicon *d;
+
+    d = calloc(1, sizeof(*d));
+    if (d == NULL) {
+        fprintf(stderr, "volicon: memory allocation failed\n");
+        return NULL;
+    }
+
+    extern const char *fuse_get_mountpoint(void);
+    d->mntpath = fuse_get_mountpoint();
+    if (!d->mntpath) {
+        goto out_free;
+    }
+
+    if (fuse_opt_parse(args, d, volicon_opts, volicon_opt_proc) == -1) {
+        goto out_free;
+    }
+
+    if (!next[0] || next[1]) {
+        fprintf(stderr, "volicon: exactly one next filesystem required\n");
+        goto out_free;
+    }
+
+    if (!d->volicon) {
+        fprintf(stderr, "volicon: missing 'volicon' option\n");
+        goto out_free;
+    }
+
+    voliconfd = open(d->volicon, O_RDONLY);
+    if (voliconfd < 0) {
+        fprintf(stderr, "volicon: failed to access volume icon file (%d)\n",
+                errno);
+        goto out_free;
+    }
+
+    ret = fstat(voliconfd, &sb);
+    if (ret) {
+        fprintf(stderr, "volicon: failed to stat volume icon file (%d)\n",
+                errno);
+        goto out_free;
+    }
+
+    if (sb.st_size > (VOLICON_ICON_MAXSIZE)) {
+        fprintf(stderr, "volicon: size limit exceeded for volume icon file\n");
+        goto out_free;
+    }
+
+    d->volicon_data = malloc(sb.st_size);
+    if (!d->volicon_data) {
+        fprintf(stderr,
+                "volicon: failed to allocate memory for volume icon data\n");
+        goto out_free;
+    }
+
+    ret = read(voliconfd, d->volicon_data, sb.st_size);
+    if (ret != sb.st_size) {
+        fprintf(stderr, "volicon: failed to read data from volume icon file\n");
+        goto out_free;
+    }
+
+    close(voliconfd);
+    voliconfd = -1;
+
+    d->volicon_size = sb.st_size;
+    d->volicon_uid = getuid();
+
+    {
+        size_t len = strlen(d->mntpath) + 2;
+        char *p1 = dirname(d->mntpath);
+        char *p2 = basename(d->mntpath);
+        char dot_path[MAXPATHLEN + 1];
+        int dot_fd;
+        if (p1 && p2 && (len <= MAXPATHLEN)) {
+            ret = snprintf(dot_path, MAXPATHLEN + 1, "%s/._%s", p1, p2);
+            if (ret == (int)len) {
+                dot_fd = open(dot_path, O_RDWR | O_CREAT | O_EXCL, 0644);
+                if (dot_fd >= 0) {
+                    uint32_t creator = VOLICON_CREATOR;
+                    uint32_t type = VOLICON_TYPE_ROOT;
+                    /* assume no interruption... just best effort */
+                    (void)write(dot_fd, dotudot_data, DOTUDOT_DATA_LEN);
+                    close(dot_fd);
+                    FinderInfoSet(dot_path, &type, &creator);
+                }
+            }
+        }
+    }
+
+    d->next = next[0];
+
+    fs = fuse_fs_new(&volicon_oper, sizeof(volicon_oper), d);
+    if (!fs) {
+        goto out_free;
+    }
+
+    return fs;
+
+ out_free:
+
+    if (d->volicon_data) {
+        free(d->volicon_data);
+    }
+ 
+    if (voliconfd >= 0) {
+        close(voliconfd);
+    }
+
+    if (d->volicon) {
+        free(d->volicon);
+    }
+
+/*
+    if (d->mntpath) {
+        free(d->mntpath);
+    }
+*/
+
+    free(d);
+
+    return NULL;
+}
+
+static int
+FinderInfoSet(const char *path, uint32_t *type, uint32_t *creator)
+{
+    int               ret;
+    attrlist_t        attrList;
+    FinderInfoAttrBuf attrBuf;
+
+    attrList.commonattr = ATTR_CMN_FNDRINFO;
+
+    memset(&attrList, 0, sizeof(attrList));
+    attrList.bitmapcount = ATTR_BIT_MAP_COUNT;
+    attrList.commonattr  = ATTR_CMN_OBJTYPE | ATTR_CMN_FNDRINFO;
+    
+    ret = getattrlist(path, &attrList, &attrBuf, sizeof(attrBuf), 0);
+    if (ret != 0) {
+        return errno;
+    }   
+    
+    if ((ret == 0) && (attrBuf.objType != VREG) ) {
+        return EINVAL;
+    } else {
+         uint32_t be_type = htonl(*type);
+         uint32_t be_creator = htonl(*creator);
+         memcpy(&attrBuf.finderInfo[0], &be_type,    sizeof(uint32_t));
+         memcpy(&attrBuf.finderInfo[4], &be_creator, sizeof(uint32_t));
+         attrList.commonattr = ATTR_CMN_FNDRINFO;
+         ret = setattrlist(path, &attrList, attrBuf.finderInfo,
+                           sizeof(attrBuf.finderInfo), 0);
+    }
+
+    return ret;
+}
+
+static int
+FinderInfoGet(const char *path, uint32_t *type, uint32_t *creator)
+{
+    int               ret;
+    attrlist_t        attrList;
+    FinderInfoAttrBuf attrBuf;
+
+    if (!type || !creator) {
+        return EINVAL;
+    }
+
+    *type = 0;
+    *creator = 0;
+
+    memset(&attrList, 0, sizeof(attrList));
+    attrList.bitmapcount = ATTR_BIT_MAP_COUNT;
+    attrList.commonattr  = ATTR_CMN_OBJTYPE | ATTR_CMN_FNDRINFO;
+
+    ret = getattrlist(path, &attrList, &attrBuf, sizeof(attrBuf), 0);
+    if (ret != 0) {
+        return errno;
+    }
+
+    if ((ret == 0) && (attrBuf.objType != VREG) ) {
+        return EINVAL;
+    } else {
+        memcpy(type, &attrBuf.finderInfo[0], sizeof(uint32_t));
+        memcpy(creator, &attrBuf.finderInfo[4], sizeof(uint32_t));
+    }
+
+    *type = ntohl(*type);
+    *creator = ntohl(*creator);
+
+    return 0;
+}
+
+FUSE_REGISTER_MODULE(volicon, volicon_new);
diff -Naur old/lib/mount.c new/lib/mount.c
--- old/lib/mount.c	2007-07-02 04:32:17.000000000 -0700
+++ new/lib/mount.c	2007-07-14 00:39:24.000000000 -0700
@@ -579,5 +579,7 @@
     return res;
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_mount_compat22,fuse_mount@FUSE_2.2");
 __asm__(".symver fuse_unmount_compat22,fuse_unmount@FUSE_2.2");
+#endif
diff -Naur old/lib/mount_bsd.c new/lib/mount_bsd.c
--- old/lib/mount_bsd.c	2006-05-03 07:46:04.000000000 -0700
+++ new/lib/mount_bsd.c	2007-07-14 00:39:24.000000000 -0700
@@ -6,6 +6,12 @@
     See the file COPYING.LIB.
 */
 
+#if (__FreeBSD__ >= 10)
+#undef _POSIX_C_SOURCE
+#include <sys/types.h>
+#include <CoreFoundation/CoreFoundation.h>
+#endif
+
 #include "fuse_i.h"
 #include "fuse_opt.h"
 
@@ -21,8 +27,186 @@
 #include <string.h>
 #include <paths.h>
 
+#if (__FreeBSD__ >= 10)
+
+#include <sys/utsname.h>
+
+#define FUSERMOUNT_PROG  "/System/Library/Filesystems/fusefs.fs/Support/mount_fusefs"
+#define FUSE_DEV_TRUNK   "/dev/fuse"
+#define PRIVATE_LOAD_COMMAND "/System/Library/Filesystems/fusefs.fs/Support/load_fusefs"
+
+#include <sys/param.h>
+#include <sys/mount.h>
+#include <AssertMacros.h>
+
+static const char *MacFUSE = "MacFUSE version 0.5.0, " __DATE__ ", " __TIME__;
+static int quiet_mode = 0;
+
+static long
+os_version_major(void)
+{
+    int ret = 0;
+    long major = 0;
+    char *c = NULL;
+    struct utsname u;
+    size_t oldlen;
+    int mib[2];
+
+    oldlen = sizeof(u.release);
+
+    mib[0] = CTL_KERN;
+    mib[1] = KERN_OSRELEASE;
+    ret = sysctl(mib, 2, u.release, &oldlen, NULL, 0);
+    if (ret != 0) {
+        return -1;
+    }
+
+    c = strchr(u.release, '.');
+    if (c == NULL) {
+        return -1;
+    }
+
+    *c = '\0';
+
+    major = strtol(u.release, NULL, 10);
+    if ((errno == EINVAL) || (errno == ERANGE)) {
+        return -1;
+    }
+
+    return major;
+}
+
+__unused static int
+checkloadable_unused(void)
+{
+    int ret;
+    struct vfsconf vfc;
+    
+    ret = getvfsbyname("fusefs", &vfc);
+    
+    return ret;
+}   
+
+static int
+checkloadable(void)
+{
+    return 1; /* load_fusefs will take care of checking */
+}
+
+int
+loadkmod()
+{
+    int result = -1;
+    int pid, terminated_pid;
+    union wait status;
+    long major;
+
+    major = os_version_major();
+
+    if (major != 8) { /* not Mac OS X 10.4.x */
+        return EINVAL;
+    }
+
+    pid = fork();
+
+    if (pid == 0) {
+        result = execl(PRIVATE_LOAD_COMMAND, PRIVATE_LOAD_COMMAND, NULL);
+        
+        /* exec failed */
+        goto Return;
+    }
+
+    require_action(pid != -1, Return, result = errno);
+
+    while ((terminated_pid = wait4(pid, (int *)&status, 0, NULL)) < 0) {
+        /* retry if EINTR, else break out with error */
+        if (errno != EINTR) {
+            break;
+        }
+    }
+
+    if ((terminated_pid == pid) && (WIFEXITED(status))) {
+        result = WEXITSTATUS(status);
+    } else {
+        result = -1;
+    }
+
+Return:
+    check_noerr_string(result, strerror(errno));
+    
+    return result;
+}
+
+static int
+post_notification(char   *name,
+                  char   *udata_keys[],
+                  char   *udata_values[],
+                  CFIndex nf_num)
+{
+    CFIndex i;
+    CFStringRef nf_name   = NULL;
+    CFStringRef nf_object = NULL;
+    CFMutableDictionaryRef nf_udata  = NULL;
+
+    CFNotificationCenterRef distributedCenter;
+    CFStringEncoding encoding = kCFStringEncodingASCII;
+
+    distributedCenter = CFNotificationCenterGetDistributedCenter();
+
+    if (!distributedCenter) {
+        return -1;
+    }
+
+    nf_name = CFStringCreateWithCString(kCFAllocatorDefault, name, encoding);
+      
+    nf_object = CFStringCreateWithCString(kCFAllocatorDefault,
+                                          LIBFUSE_UNOTIFICATIONS_OBJECT,
+                                          encoding);
+ 
+    nf_udata = CFDictionaryCreateMutable(kCFAllocatorDefault,
+                                         nf_num,
+                                         &kCFCopyStringDictionaryKeyCallBacks,
+                                         &kCFTypeDictionaryValueCallBacks);
+
+    if (!nf_name || !nf_object || !nf_udata) {
+        goto out;
+    }
+
+    for (i = 0; i < nf_num; i++) {
+        CFStringRef a_key = CFStringCreateWithCString(kCFAllocatorDefault,
+                                                      udata_keys[i],
+                                                      kCFStringEncodingASCII);
+        CFStringRef a_value = CFStringCreateWithCString(kCFAllocatorDefault,
+                                                        udata_values[i],
+                                                        kCFStringEncodingASCII);
+        CFDictionarySetValue(nf_udata, a_key, a_value);
+        CFRelease(a_key);
+        CFRelease(a_value);
+    }
+
+    CFNotificationCenterPostNotification(distributedCenter,
+                                         nf_name, nf_object, nf_udata, false);
+
+out:
+    if (nf_name) {
+        CFRelease(nf_name);
+    }
+
+    if (nf_object) {
+        CFRelease(nf_object);
+    }
+
+    if (nf_udata) {
+        CFRelease(nf_udata);
+    }
+
+    return 0;
+}
+
+#else
 #define FUSERMOUNT_PROG         "mount_fusefs"
 #define FUSE_DEV_TRUNK          "/dev/fuse"
+#endif
 
 enum {
     KEY_ALLOW_ROOT,
@@ -30,6 +214,11 @@
     KEY_HELP,
     KEY_VERSION,
     KEY_KERN
+#if (__FreeBSD__ >= 10)
+    ,
+    KEY_DIO,
+    KEY_QUIET,
+#endif
 };
 
 struct mount_opts {
@@ -108,11 +297,46 @@
     FUSE_OPT_KEY("noprivate",           KEY_KERN),
     FUSE_OPT_KEY("noneglect_shares",    KEY_KERN),
     FUSE_OPT_KEY("nopush_symlinks_in",  KEY_KERN),
+#if (__FreeBSD__ >= 10)
+    /* Mac OS X options */
+    FUSE_OPT_KEY("allow_recursion",     KEY_KERN),
+    FUSE_OPT_KEY("allow_root",          KEY_KERN), /* need to pass this on */
+    FUSE_OPT_KEY("blocksize=",          KEY_KERN),
+    FUSE_OPT_KEY("daemon_timeout=",     KEY_KERN),
+    FUSE_OPT_KEY("defer_auth",          KEY_KERN),
+    FUSE_OPT_KEY("direct_io",           KEY_DIO),
+    FUSE_OPT_KEY("extended_security",   KEY_KERN),
+    FUSE_OPT_KEY("fsid=",               KEY_KERN),
+    FUSE_OPT_KEY("fsname=",             KEY_KERN),
+    FUSE_OPT_KEY("fssubtype=",          KEY_KERN),
+    FUSE_OPT_KEY("init_timeout=",       KEY_KERN),
+    FUSE_OPT_KEY("iosize=",             KEY_KERN),
+    FUSE_OPT_KEY("jail_symlinks",       KEY_KERN),
+    FUSE_OPT_KEY("kill_on_unmount",     KEY_KERN),
+    FUSE_OPT_KEY("noalerts",            KEY_KERN),
+    FUSE_OPT_KEY("noapplespecial",      KEY_KERN),
+    FUSE_OPT_KEY("noattrcache",         KEY_KERN),
+    FUSE_OPT_KEY("noauthopaque",        KEY_KERN),
+    FUSE_OPT_KEY("noauthopaqueaccess",  KEY_KERN),
+    FUSE_OPT_KEY("nobrowse",            KEY_KERN),
+    FUSE_OPT_KEY("nolocalcaches",       KEY_KERN),
+    FUSE_OPT_KEY("noping_diskarb",      KEY_KERN),
+    FUSE_OPT_KEY("noreadahead",         KEY_KERN),
+    FUSE_OPT_KEY("nosynconclose",       KEY_KERN),
+    FUSE_OPT_KEY("nosyncwrites",        KEY_KERN),
+    FUSE_OPT_KEY("noubc",               KEY_KERN),
+    FUSE_OPT_KEY("novncache",           KEY_KERN),
+    FUSE_OPT_KEY("ping_diskarb",        KEY_KERN),
+    FUSE_OPT_KEY("quiet",               KEY_QUIET),
+    FUSE_OPT_KEY("subtype=",            KEY_KERN),
+    FUSE_OPT_KEY("volname=",            KEY_KERN),
+#else
     /* Linux specific mount options, but let just the mount util handle them */
     FUSE_OPT_KEY("fsname=",             KEY_KERN),
     FUSE_OPT_KEY("nonempty",            KEY_KERN),
     FUSE_OPT_KEY("large_read",          KEY_KERN),
     FUSE_OPT_KEY("max_read=",           KEY_KERN),
+#endif
     FUSE_OPT_END
 };
 
@@ -149,6 +373,18 @@
     case KEY_KERN:
         return fuse_opt_add_opt(&mo->kernel_opts, arg);
 
+#if (__FreeBSD__ >= 10)
+    case KEY_DIO:
+          if (fuse_opt_add_opt(&mo->kernel_opts, "direct_io") == -1 ||
+              (fuse_opt_add_arg(outargs, "-odirect_io") == -1))
+            return -1;
+        return 0;
+
+    case KEY_QUIET:
+        quiet_mode = 1;
+        return 0;
+#endif
+
     case KEY_HELP:
         mount_help();
         mo->ishelp = 1;
@@ -199,8 +435,21 @@
     if (rv)
         return;
 
+#if (__FreeBSD__ >= 10)
+    {
+        int ret;
+        char *rp = NULL;
+        char resolved_path[PATH_MAX];
+
+        rp = realpath(mountpoint, resolved_path);
+        if (rp) {
+            ret = unmount(resolved_path, 0);
+        }
+    }
+#else
     asprintf(&umount_cmd, "/sbin/umount %s", dev);
     system(umount_cmd);
+#endif
 }
 
 void fuse_kern_unmount(const char *mountpoint, int fd)
@@ -222,13 +471,29 @@
     if (*ep != '\0')
         return;
 
+#if (__FreeBSD__ >= 10)
+    {
+        int ret;
+        char *rp = NULL;
+        char resolved_path[PATH_MAX];
+
+        rp = realpath(mountpoint, resolved_path);
+        if (rp) {
+            ret = unmount(resolved_path, 0);
+        }
+    }
+#else
     asprintf(&umount_cmd, "/sbin/umount " _PATH_DEV "%s", dev);
     system(umount_cmd);
+#endif
 }
 
 /* Check if kernel is doing init in background */
 static int init_backgrounded(void)
 {
+#if (__FreeBSD__ >= 10)
+    return 0;
+#else
     int ibg, len;
 
     len = sizeof(ibg);
@@ -237,6 +502,7 @@
         return 0;
 
     return ibg;
+#endif
 }
 
 
@@ -247,6 +513,55 @@
     char *fdnam, *dev;
     int pid;
 
+#if (__FreeBSD__ >= 10)
+    if (!mountpoint) {
+        fprintf(stderr, "missing or invalid mount point\n");
+        return -1;
+    }
+
+    if (checkloadable()) {
+        int result = loadkmod();
+        if (result) {
+            CFOptionFlags responseFlags;
+            if (result == EINVAL) {
+                if (!quiet_mode) {
+                    CFUserNotificationDisplayNotice(
+                        (CFTimeInterval)0,
+                        kCFUserNotificationCautionAlertLevel,
+                        (CFURLRef)0,
+                        (CFURLRef)0,
+                        (CFURLRef)0,
+                        CFSTR("MacFUSE Version Too Old"),
+                        CFSTR("The installed MacFUSE version is too old for the operating system. Please upgrade your MacFUSE installation to one that is compatible with the currently running operating system."),
+                        CFSTR("OK")
+                    );
+                }
+                post_notification(
+                    LIBFUSE_UNOTIFICATIONS_NOTIFY_OSISTOONEW,
+                    NULL, NULL, 0);
+            } else if (result == EBUSY) {
+                if (!quiet_mode) {
+                    CFUserNotificationDisplayNotice(
+                        (CFTimeInterval)0,
+                        kCFUserNotificationCautionAlertLevel,
+                        (CFURLRef)0,
+                        (CFURLRef)0,
+                        (CFURLRef)0,
+                        CFSTR("MacFUSE Version Mismatch"),
+                        CFSTR("MacFUSE has been updated but an incompatible or old version of the MacFUSE kernel extension is already loaded. It failed to unload, possibly because a MacFUSE volume is currently mounted.\n\nPlease eject all MacFUSE volumes and try again, or simply restart the system for changes to take effect."),
+                        CFSTR("OK")
+                    );
+                } 
+                post_notification(LIBFUSE_UNOTIFICATIONS_NOTIFY_VERSIONMISMATCH,
+                                  NULL, NULL, 0);
+            }
+            fprintf(stderr, "fusefs file system is not available (%d)\n",
+                    result);
+            return -1;
+        }
+    }
+#endif
+
     fdnam = getenv("FUSE_DEV_FD");
 
     if (fdnam) {
@@ -267,12 +582,29 @@
 
     dev = getenv("FUSE_DEV_NAME");
 
-    if (! dev)
-	dev = FUSE_DEV_TRUNK;
-
-    if ((fd = open(dev, O_RDWR)) < 0) {
-        perror("fuse: failed to open fuse device");
-        return -1;
+    if (dev) {
+        if ((fd = open(dev, O_RDWR)) < 0) {
+            perror("fuse: failed to open fuse device");
+            return -1;
+        }
+    } else {
+#define NFUSEDEVICE 16
+        int r, devidx = -1;
+        char devpath[MAXPATHLEN];
+
+        for (r = 0; r < NFUSEDEVICE; r++) {
+            snprintf(devpath, MAXPATHLEN - 1, "/dev/fuse%d", r);
+            fd = open(devpath, O_RDWR);
+            if (fd >= 0) {
+                dev = devpath;
+                devidx = r;
+                break;
+            }
+        }
+        if (devidx == -1) {
+            perror("fuse: failed to open fuse device");
+            return -1;
+        }
     }
 
 mount:
@@ -322,11 +654,31 @@
             perror("fuse: failed to exec mount program");
             exit(1);
         }
+#if (__FreeBSD__ >= 10)
+        else {
+            int status;
+            waitpid(pid, &status, 0);
+            if (WIFEXITED(status) && (WEXITSTATUS(status) != 0)) {
+                exit(WEXITSTATUS(status));
+            }
+        }
+#endif
 
         exit(0);
     }
 
+#if (__FreeBSD__ >= 10)
+    {
+        int status;
+
+        waitpid(pid, &status, 0);
+        if (WIFEXITED(status) && (WEXITSTATUS(status) != 0)) {
+            exit(WEXITSTATUS(status));
+        }
+    }
+#else
     waitpid(pid, NULL, 0);
+#endif
 
 out:
     return fd;
@@ -360,4 +712,6 @@
     return res;
 }
 
+#if !(__FreeBSD__ >= 10)
 __asm__(".symver fuse_unmount_compat22,fuse_unmount@FUSE_2.2");
+#endif
diff -Naur old/lib/ulockmgr.c new/lib/ulockmgr.c
--- old/lib/ulockmgr.c	2007-07-02 04:32:17.000000000 -0700
+++ new/lib/ulockmgr.c	2007-07-14 00:39:24.000000000 -0700
@@ -18,9 +18,19 @@
 #include <assert.h>
 #include <signal.h>
 #include <sys/stat.h>
+#if (__FreeBSD__ >= 10)
+#undef _POSIX_C_SOURCE
 #include <sys/socket.h>
+#define _POSIX_C_SOURCE 200112L
+#else
+#include <sys/socket.h>
+#endif
 #include <sys/wait.h>
 
+#if (__FreeBSD__ >= 10)
+#define MSG_NOSIGNAL 0
+#endif
+
 struct message {
     unsigned intr : 1;
     unsigned nofd : 1;
@@ -140,6 +150,13 @@
         return -1;
     }
     ulockmgr_cfd = sv[1];
+#if (__FreeBSD__ >= 10)
+    {
+        int on = 1;
+        res = setsockopt(ulockmgr_cfd, SOL_SOCKET, SO_NOSIGPIPE, (void *)&on,
+                         sizeof(on));
+    }
+#endif
     return 0;
 }
 
diff -Naur old/run_configure.sh new/run_configure.sh
--- old/run_configure.sh	1969-12-31 16:00:00.000000000 -0800
+++ new/run_configure.sh	2007-07-14 00:39:24.000000000 -0700
@@ -0,0 +1 @@
+CFLAGS="-D__FreeBSD__=10 -D_POSIX_C_SOURCE=200112L -O -g -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.4u.sdk" LDFLAGS="-arch i386 -arch ppc -framework CoreFoundation" ./configure --prefix=/usr/local --disable-dependency-tracking
