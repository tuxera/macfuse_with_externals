//
//  SignedPlistServer.m
//  autoinstaller
//
//  Created by Greg Miller on 7/15/08.
//  Copyright 2008 Google Inc. All rights reserved.
//

#import "SignedPlistServer.h"
#import "Signer.h"
#import "PlistSigner.h"
#import "GTMLogger.h"

// Public Key for officially signed MacFUSE (Tuxera) rules plists
static unsigned char macfuse_public_der[] = {
0x30, 0x82, 0x02, 0x22, 0x30, 0x0D, 0x06, 0x09, 0x2A, 0x86, 0x48, 0x86,
0xF7, 0x0D, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x02, 0x0F, 0x00,
0x30, 0x82, 0x02, 0x0A, 0x02, 0x82, 0x02, 0x01, 0x00, 0xC7, 0xD3, 0xCF,
0xA7, 0x90, 0xAE, 0x87, 0x2B, 0x7A, 0x84, 0xDA, 0x4F, 0xFC, 0x9C, 0xFB,
0xB1, 0xF7, 0xF7, 0x26, 0x64, 0x09, 0x91, 0xAB, 0x92, 0xE7, 0xB0, 0xED,
0xE9, 0x5D, 0xE2, 0xA3, 0x24, 0xD2, 0x17, 0x89, 0xFF, 0xAF, 0xE1, 0xEA,
0x23, 0x65, 0x75, 0xE6, 0xBB, 0x13, 0x2E, 0xF4, 0x09, 0x90, 0x31, 0x4D,
0xA7, 0x45, 0x52, 0x05, 0x23, 0x3C, 0xDB, 0x32, 0x89, 0x57, 0x8D, 0xB7,
0x2E, 0x89, 0x2A, 0x79, 0x6E, 0x82, 0x3A, 0x95, 0xF4, 0x59, 0x04, 0x7E,
0x61, 0xB7, 0xE9, 0x56, 0xE6, 0xA6, 0x8A, 0xBF, 0x2C, 0x9E, 0xA3, 0xDB,
0x11, 0xF4, 0xD4, 0xFD, 0x3F, 0x2A, 0x40, 0x55, 0xDB, 0xB1, 0xDE, 0x97,
0xD3, 0x1D, 0x28, 0x01, 0xB2, 0x49, 0xD8, 0xE6, 0x81, 0xC6, 0xE1, 0xDB,
0x56, 0x80, 0x6B, 0x3C, 0x66, 0x20, 0xEA, 0xFF, 0xB2, 0xD5, 0x3A, 0xEE,
0xD0, 0x37, 0x2C, 0x21, 0xBA, 0x98, 0x09, 0x4C, 0x0D, 0x98, 0x8E, 0x9F,
0xFC, 0x2F, 0x9A, 0xE6, 0xC6, 0xBF, 0x1E, 0xA8, 0x79, 0x68, 0x1C, 0x0C,
0xBD, 0x67, 0x64, 0x0A, 0xBA, 0x0B, 0x20, 0x42, 0x87, 0xE8, 0x2F, 0x0F,
0xF1, 0x58, 0x35, 0xEB, 0x2C, 0x96, 0x33, 0x81, 0xAC, 0x46, 0xD3, 0x64,
0x2A, 0x3A, 0x27, 0x8E, 0x6A, 0xD5, 0x47, 0x81, 0xA6, 0x02, 0x97, 0x3A,
0x03, 0x24, 0xF7, 0x81, 0x51, 0x78, 0x2D, 0x89, 0x91, 0x87, 0x45, 0xEE,
0x4A, 0xA2, 0x18, 0x57, 0x73, 0x76, 0x98, 0x23, 0xC4, 0x4B, 0xC8, 0x51,
0x74, 0x31, 0xA7, 0x6A, 0xF6, 0xD0, 0x6C, 0x49, 0xE1, 0x2F, 0x44, 0xD2,
0x3F, 0xA1, 0x4F, 0xFF, 0x53, 0xB1, 0x59, 0xEA, 0xE8, 0xDC, 0xC2, 0x9B,
0x2D, 0x05, 0x58, 0x20, 0xBA, 0xA8, 0xBE, 0xBF, 0xD5, 0x96, 0xE1, 0x55,
0x65, 0xBD, 0xD3, 0xEB, 0x9A, 0x14, 0x1D, 0x9E, 0xF5, 0xB8, 0x10, 0x95,
0x4B, 0x6F, 0x4C, 0x8A, 0x28, 0xE8, 0x1E, 0xAD, 0x2E, 0xD9, 0x9F, 0x69,
0xC3, 0xFF, 0xB0, 0xBA, 0x6B, 0xF3, 0xBA, 0xA8, 0x1F, 0x38, 0xFB, 0x49,
0x0B, 0x7E, 0xD3, 0x92, 0xBD, 0x75, 0x68, 0x7A, 0x3C, 0xF2, 0xD4, 0x79,
0x50, 0xC1, 0x2B, 0xA9, 0xAE, 0x21, 0x35, 0x03, 0xC0, 0x43, 0xE9, 0xC1,
0xD6, 0xAA, 0x18, 0x34, 0x4D, 0xFE, 0x30, 0xA1, 0x55, 0xAB, 0x3B, 0x7C,
0x26, 0x04, 0x29, 0xC5, 0xFA, 0x1F, 0x24, 0x44, 0x6C, 0xBF, 0xE4, 0xB0,
0x67, 0x7E, 0x7F, 0x0E, 0x64, 0xDA, 0xC6, 0x19, 0x6A, 0x33, 0xC4, 0x75,
0xE1, 0xB1, 0x16, 0xA7, 0xAE, 0x50, 0x5F, 0x52, 0xA7, 0xD7, 0x7D, 0x0F,
0x6D, 0x95, 0x33, 0x84, 0xBB, 0x8C, 0x37, 0x0E, 0x11, 0x46, 0xD2, 0xA1,
0x4E, 0x2B, 0x83, 0xF8, 0x73, 0xCD, 0xEE, 0xB1, 0x6C, 0xB9, 0xDD, 0x0E,
0x77, 0xC3, 0x33, 0x18, 0x9F, 0x75, 0x04, 0xA9, 0xE9, 0x89, 0x16, 0x60,
0x2C, 0x07, 0xEE, 0xD3, 0x29, 0x2D, 0xD3, 0xB9, 0x19, 0xBD, 0x4F, 0x0A,
0x6C, 0xF8, 0x44, 0x9F, 0x5B, 0x72, 0x42, 0xEF, 0xCD, 0x51, 0xE3, 0x20,
0x48, 0x5B, 0x3C, 0xB9, 0xAA, 0xB8, 0x15, 0x12, 0xED, 0xEC, 0x62, 0xE5,
0xC6, 0x32, 0x86, 0x60, 0x61, 0x6D, 0x06, 0xCE, 0xDC, 0x5F, 0xE9, 0xA8,
0x7C, 0x73, 0xEE, 0x9C, 0x03, 0xC2, 0xD1, 0xD1, 0x70, 0x46, 0x0C, 0xDF,
0x12, 0x2D, 0x66, 0x56, 0xFB, 0x87, 0x92, 0x90, 0x34, 0xE6, 0xE9, 0xF0,
0x44, 0x87, 0x3F, 0xCE, 0x7F, 0x7B, 0x43, 0xFC, 0x79, 0xF5, 0xD7, 0xA5,
0x78, 0x6E, 0x58, 0x4A, 0x8B, 0x6F, 0xC6, 0x8A, 0xD6, 0x3C, 0xC8, 0xB6,
0xA7, 0x9D, 0x31, 0x5D, 0xE2, 0x5E, 0xC8, 0x05, 0x76, 0x3A, 0xA2, 0x24,
0x2F, 0x0E, 0xB5, 0x70, 0x8E, 0xA3, 0xE0, 0x61, 0xB8, 0xBE, 0x31, 0xD5,
0xFE, 0x97, 0xC6, 0x0E, 0xC9, 0x02, 0x03, 0x01, 0x00, 0x01
};
static unsigned int macfuse_public_der_len = 550;

// Original public Key for officially signed MacFUSE rules plists
static unsigned char old_macfuse_public_der[] __attribute__((unused)) = {
0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81,
0x89, 0x02, 0x81, 0x81, 0x00, 0xc6, 0xed, 0xf8, 0x40, 0x75, 0xd0, 0x86,
0xe8, 0xd5, 0xc7, 0x9d, 0xd8, 0xba, 0x10, 0x91, 0x23, 0xd1, 0xfa, 0x3a,
0x2a, 0x1f, 0xb8, 0xe9, 0xbf, 0x3e, 0x55, 0xe2, 0x67, 0x30, 0x2f, 0xa1,
0x43, 0x51, 0xe4, 0xe3, 0xdb, 0x71, 0x7a, 0x30, 0x1d, 0xb3, 0xe8, 0x3d,
0x74, 0x1f, 0x07, 0x57, 0xf7, 0x17, 0x69, 0x3d, 0x1b, 0xda, 0x0a, 0x61,
0x78, 0x59, 0x27, 0xa5, 0x59, 0x56, 0x77, 0xcc, 0xa8, 0x09, 0x96, 0xd0,
0x6f, 0xe7, 0xfb, 0x3a, 0xd0, 0x0a, 0xed, 0x0b, 0xad, 0x2c, 0xc7, 0x83,
0x1d, 0x53, 0x07, 0xf4, 0x17, 0x5b, 0x1c, 0x39, 0x8e, 0x47, 0x42, 0x8b,
0x53, 0xc4, 0xd1, 0x11, 0x68, 0x1c, 0x69, 0x11, 0x2a, 0x22, 0xc9, 0x5b,
0x4e, 0xda, 0xf6, 0x39, 0x98, 0x46, 0x91, 0xf9, 0x13, 0x1f, 0x11, 0xb8,
0xaf, 0x5e, 0x10, 0xa5, 0x2f, 0x40, 0x83, 0x27, 0x77, 0x7a, 0x67, 0x00,
0x01, 0x02, 0x03, 0x01, 0x00, 0x01
};
static unsigned int old_macfuse_public_der_len __attribute__((unused)) = 162;


@implementation SignedPlistServer

- (id)initWithURL:(NSURL *)url params:(NSDictionary *)params {
  // By default, this class will create a SignedPlistServer customized with 
  // the appropriate public key for the signature of MacFUSE rules plists.
  NSData *pubKey = [NSData dataWithBytes:macfuse_public_der
                                  length:macfuse_public_der_len];
  Signer *macfuseSigner = [Signer signerWithPublicKey:pubKey privateKey:nil];
  return [self initWithURL:url signer:macfuseSigner];
}

- (id)initWithURL:(NSURL *)url signer:(Signer *)signer {
  if ((self = [super initWithURL:url params:nil])) {
    signer_ = [signer retain];
    if (signer_ == nil) {
      [self release];
      return nil;
    }
  }
  return self;
}

- (void)dealloc {
  [signer_ release];
  [super dealloc];
}

- (NSArray *)updateInfosForResponse:(NSURLResponse *)response
                               data:(NSData *)data {
  // Decode the response |data| into a plist
  NSString *body = [[[NSString alloc]
                     initWithData:data
                     encoding:NSUTF8StringEncoding] autorelease];
  NSDictionary *plist = nil;
  @try {
    // This method can throw if |body| isn't a valid plist
    plist = [body propertyList];
  }
  @catch (id ex) {
    GTMLoggerError(@"Failed to parse response into plist: %@", ex);
    return nil;
  }

  PlistSigner *plistSigner = [[[PlistSigner alloc]
                               initWithSigner:signer_
                                        plist:plist] autorelease];
  
  if (![plistSigner isPlistSigned]) {
    GTMLoggerInfo(@"Ignoring plist with bad signature (plistSigner=%@)\n%@",
                  plistSigner, body);
    return nil;
  }
  
  return [super updateInfosForResponse:response data:data];
}

@end
