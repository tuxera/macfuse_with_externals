//
//  SignedPlistTest.m
//  autoinstaller
//
//  Created by Greg Miller on 7/18/08.
//  Copyright 2008 Google Inc. All rights reserved.
//

#import <SenTestingKit/SenTestingKit.h>
#import "PlistSigner.h"
#import "Signer.h"


static unsigned char private_key_der[] = {
0x30, 0x82, 0x02, 0x5d, 0x02, 0x01, 0x00, 0x02, 0x81, 0x81, 0x00, 0xc7,
0xa2, 0x29, 0x0e, 0xc7, 0xf2, 0x15, 0x21, 0x46, 0x01, 0x44, 0x89, 0x5a,
0x78, 0x4b, 0xe5, 0x07, 0x8d, 0x69, 0x80, 0x69, 0x98, 0xd8, 0x5c, 0x89,
0x5c, 0x5d, 0xe6, 0x52, 0x02, 0xc4, 0x58, 0x28, 0xad, 0xdb, 0x7a, 0x62,
0x12, 0x38, 0x1d, 0x3a, 0xef, 0x82, 0xf9, 0xfe, 0x97, 0x99, 0x82, 0x38,
0x9e, 0x9f, 0x76, 0x47, 0x8d, 0x10, 0x63, 0x1a, 0xfa, 0x70, 0x17, 0x03,
0x4c, 0x3d, 0x80, 0x17, 0xd2, 0xb0, 0x76, 0xcb, 0x60, 0xd9, 0xa3, 0xe9,
0x52, 0x4e, 0x18, 0x62, 0x6e, 0x3a, 0xa7, 0xf5, 0x19, 0x2f, 0x6e, 0x9c,
0x6a, 0xfa, 0xd0, 0x05, 0x5f, 0xca, 0x88, 0xb7, 0x17, 0xc1, 0x3a, 0xe3,
0x30, 0x88, 0x2e, 0xcd, 0x69, 0xae, 0xe8, 0x67, 0x62, 0xe9, 0x3a, 0xaa,
0xaa, 0x55, 0x50, 0xab, 0xfa, 0xe5, 0x26, 0xbe, 0x61, 0xa7, 0xb4, 0x7b,
0x3a, 0xa6, 0x6f, 0x72, 0x80, 0xb9, 0xb7, 0x02, 0x03, 0x01, 0x00, 0x01,
0x02, 0x81, 0x81, 0x00, 0x83, 0x17, 0xbd, 0x96, 0x73, 0x3e, 0x49, 0x19,
0xdc, 0x7a, 0xa0, 0xa3, 0x01, 0xc1, 0xd5, 0x34, 0xc4, 0xcc, 0xdb, 0xe6,
0xf3, 0x70, 0xe7, 0x43, 0x7d, 0x00, 0x26, 0xb9, 0x44, 0x49, 0x84, 0xdd,
0xcf, 0x78, 0xbb, 0x93, 0x96, 0x2b, 0x18, 0xa6, 0x39, 0x39, 0x66, 0xec,
0xfb, 0x7e, 0x59, 0xd3, 0xe5, 0x92, 0x64, 0x6c, 0xab, 0x77, 0xba, 0xb7,
0x19, 0xd4, 0x33, 0x1f, 0x29, 0x8f, 0x3b, 0x22, 0x64, 0x59, 0x73, 0xb8,
0x9c, 0xa4, 0x72, 0xe6, 0x3f, 0xe2, 0x8d, 0x01, 0x62, 0x5d, 0x60, 0xfb,
0xcf, 0xc2, 0x80, 0x30, 0xa6, 0xe7, 0x5b, 0xf3, 0x82, 0x7f, 0x38, 0xaa,
0xc2, 0xba, 0xef, 0x71, 0x6d, 0x05, 0x33, 0xcf, 0x11, 0x5f, 0xeb, 0x69,
0x46, 0x7b, 0x1b, 0x13, 0x0b, 0x31, 0x82, 0x02, 0xf9, 0x89, 0xa0, 0xfe,
0x17, 0x96, 0xd8, 0x68, 0x63, 0x47, 0xff, 0x0c, 0xaf, 0xd8, 0x5b, 0xa1,
0x02, 0x41, 0x00, 0xf7, 0xd3, 0x59, 0x29, 0x93, 0x8d, 0x02, 0xfb, 0xfc,
0x93, 0x03, 0xc7, 0xc6, 0x82, 0x4b, 0x96, 0x6a, 0xd4, 0x0a, 0x43, 0x58,
0x42, 0x7c, 0xa7, 0xba, 0x47, 0x13, 0x29, 0x4d, 0xc8, 0x86, 0xe7, 0x80,
0x42, 0xd5, 0xb8, 0xae, 0xae, 0xa3, 0x1d, 0x84, 0xc0, 0x9e, 0xd0, 0xb4,
0xc5, 0x44, 0x87, 0x20, 0x45, 0x22, 0xdd, 0x14, 0xed, 0x8d, 0xd9, 0x12,
0x50, 0xcb, 0xb2, 0xb2, 0x18, 0xb6, 0xd3, 0x02, 0x41, 0x00, 0xce, 0x37,
0xe0, 0x0e, 0xb5, 0x80, 0x52, 0xfc, 0xce, 0x2a, 0xc9, 0x53, 0xeb, 0x91,
0x4e, 0x67, 0x74, 0xb9, 0x05, 0xbd, 0xfc, 0x52, 0xec, 0xa3, 0xcb, 0x29,
0xe0, 0x74, 0x05, 0x44, 0xef, 0x96, 0x26, 0x55, 0x50, 0xb0, 0xab, 0x8c,
0xbc, 0xfa, 0xc5, 0x7b, 0xe6, 0xd2, 0xb6, 0x50, 0x58, 0x7f, 0xe7, 0xe8,
0x85, 0x35, 0xca, 0x5a, 0xe7, 0x34, 0x42, 0x32, 0xc4, 0xf0, 0x1b, 0x0e,
0x2b, 0x0d, 0x02, 0x40, 0x6a, 0x0f, 0x01, 0xf6, 0x80, 0x15, 0xf5, 0xf3,
0xff, 0x58, 0xaf, 0x62, 0x7c, 0xba, 0xe0, 0x3c, 0x64, 0x45, 0x90, 0x8a,
0xd7, 0xa7, 0xc4, 0x8f, 0x47, 0x72, 0x09, 0x6a, 0x40, 0xc6, 0x93, 0xad,
0x59, 0x3f, 0xc1, 0x15, 0x43, 0x74, 0xab, 0x8c, 0x03, 0x77, 0x27, 0xc0,
0x6b, 0xcc, 0x8c, 0x92, 0x43, 0xa6, 0x32, 0xd0, 0x68, 0x97, 0x6d, 0x80,
0x3b, 0x8d, 0x66, 0x4f, 0x78, 0x56, 0x89, 0x4f, 0x02, 0x41, 0x00, 0x89,
0xea, 0x48, 0x88, 0xcd, 0xce, 0x32, 0xb2, 0x2c, 0x57, 0xe5, 0x29, 0xa0,
0xe4, 0x1f, 0x21, 0x85, 0xa8, 0xb0, 0x34, 0x6d, 0x6a, 0x30, 0x25, 0x23,
0x1c, 0xb0, 0xa6, 0x27, 0x58, 0x01, 0x3b, 0xd4, 0x0b, 0x3e, 0xd9, 0xc9,
0x01, 0x68, 0xe9, 0xf5, 0xe5, 0x75, 0x6b, 0xfa, 0xce, 0x25, 0x41, 0xf5,
0xa1, 0x46, 0x65, 0xc1, 0x1d, 0xa6, 0x7f, 0x06, 0xbe, 0xd9, 0x83, 0x13,
0x35, 0x18, 0x89, 0x02, 0x40, 0x3f, 0x8f, 0x94, 0xcf, 0x1b, 0x0b, 0xb6,
0x18, 0xb1, 0x0a, 0x0f, 0xd2, 0xbd, 0x51, 0x69, 0x95, 0x74, 0x93, 0xb7,
0xc0, 0x2b, 0xcb, 0x18, 0x41, 0x7b, 0x7e, 0x32, 0x2d, 0x50, 0xef, 0xe4,
0xf7, 0x43, 0xa9, 0x99, 0x6b, 0xa7, 0x89, 0xd5, 0x36, 0x67, 0x2d, 0xdb,
0x65, 0x95, 0x37, 0xbf, 0x7d, 0x7f, 0x88, 0xb0, 0x86, 0xff, 0x94, 0xeb,
0x6f, 0xb1, 0xd7, 0x40, 0x99, 0x0f, 0xc4, 0x2c, 0x87
};
static unsigned int private_key_der_len = 609;


static unsigned char public_key_der[] = {
0x30, 0x81, 0x9f, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7,
0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x81, 0x8d, 0x00, 0x30, 0x81,
0x89, 0x02, 0x81, 0x81, 0x00, 0xc7, 0xa2, 0x29, 0x0e, 0xc7, 0xf2, 0x15,
0x21, 0x46, 0x01, 0x44, 0x89, 0x5a, 0x78, 0x4b, 0xe5, 0x07, 0x8d, 0x69,
0x80, 0x69, 0x98, 0xd8, 0x5c, 0x89, 0x5c, 0x5d, 0xe6, 0x52, 0x02, 0xc4,
0x58, 0x28, 0xad, 0xdb, 0x7a, 0x62, 0x12, 0x38, 0x1d, 0x3a, 0xef, 0x82,
0xf9, 0xfe, 0x97, 0x99, 0x82, 0x38, 0x9e, 0x9f, 0x76, 0x47, 0x8d, 0x10,
0x63, 0x1a, 0xfa, 0x70, 0x17, 0x03, 0x4c, 0x3d, 0x80, 0x17, 0xd2, 0xb0,
0x76, 0xcb, 0x60, 0xd9, 0xa3, 0xe9, 0x52, 0x4e, 0x18, 0x62, 0x6e, 0x3a,
0xa7, 0xf5, 0x19, 0x2f, 0x6e, 0x9c, 0x6a, 0xfa, 0xd0, 0x05, 0x5f, 0xca,
0x88, 0xb7, 0x17, 0xc1, 0x3a, 0xe3, 0x30, 0x88, 0x2e, 0xcd, 0x69, 0xae,
0xe8, 0x67, 0x62, 0xe9, 0x3a, 0xaa, 0xaa, 0x55, 0x50, 0xab, 0xfa, 0xe5,
0x26, 0xbe, 0x61, 0xa7, 0xb4, 0x7b, 0x3a, 0xa6, 0x6f, 0x72, 0x80, 0xb9,
0xb7, 0x02, 0x03, 0x01, 0x00, 0x01
};
static unsigned int public_key_der_len = 162;


static NSString *const kSignedPlist = 
@"<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
@"<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">"
@"<plist version=\"1.0\">"
@"<dict>"
@"	<key>Rules</key>"
@"	<array>"
@"		<dict>"
@"			<key>Codebase</key>"
@"			<string>http://macfuse.googlecode.com/svn/releases/MacFUSE-1.7.dmg</string>"
@"			<key>Hash</key>"
@"			<string>9I5CFGd/dHClCLycl2UJlvW3LKg=</string>"
@"			<key>Predicate</key>"
@"			<string>1 == 1</string>"
@"			<key>ProductID</key>"
@"			<string>com.google.filesystems.fusefs</string>"
@"			<key>Size</key>"
@"			<string>1732368</string>"
@"			<key>Version</key>"
@"			<string>1.7.1</string>"
@"		</dict>"
@"	</array>"
@"	<key>Signature</key>"
@"	<data>"
@"	jWUbl4GcsH0YETYZPHTew20t98fT7zKGImJ/9en5EvGdi3Nj5E2D+/0xlU+wEbjkw2qg"
@"	DemIvCEy0Xp+p8AoSVPRdWyY7LY+erLlkT7osELfU3rneXh4x2/n54CdNUxkTY9zuCev"
@"	G/n9Ab29qepYDYYVLdRZLOkeBpyHVBvtHGk="
@"	</data>"
@"</dict>"
@"</plist>"
;


@interface PlistSignerTest : SenTestCase {
 @private
  Signer *signer_;
}
@end

@implementation PlistSignerTest

- (void)setUp {
  NSData *publicKey = [NSData dataWithBytes:public_key_der
                                     length:public_key_der_len];
  NSData *privateKey = [NSData dataWithBytes:private_key_der
                                      length:private_key_der_len];  
  signer_ = [[Signer alloc] initWithPublicKey:publicKey privateKey:privateKey];
}

- (void)tearDown {
  [signer_ release];
}

- (void)testCreation {
  PlistSigner *plistSigner = [[[PlistSigner alloc] init] autorelease];
  STAssertNil(plistSigner, nil);
  
  plistSigner = [[[PlistSigner alloc] initWithSigner:nil plist:nil] autorelease];
  STAssertNil(plistSigner, nil);
  
  plistSigner = [[[PlistSigner alloc] initWithSigner:signer_
                                               plist:nil] autorelease];
  STAssertNil(plistSigner, nil);
  
  plistSigner = [[[PlistSigner alloc] initWithSigner:nil
                                               plist:[NSDictionary dictionary]] autorelease];
  STAssertNil(plistSigner, nil);
  
  plistSigner = [[[PlistSigner alloc] initWithSigner:signer_
                                               plist:[NSDictionary dictionary]] autorelease];
  STAssertNotNil(plistSigner, nil);
}

- (void)ensureUnsignedPlist:(NSDictionary *)plist {
  PlistSigner *plistSigner = [[[PlistSigner alloc]
                               initWithSigner:signer_
                                        plist:plist] autorelease];
  STAssertNotNil(plistSigner, nil);
  STAssertFalse([plistSigner isPlistSigned], nil);
  STAssertTrue([plistSigner signPlist], nil);
  STAssertTrue([plistSigner isPlistSigned], nil);
  STAssertTrue([plistSigner unsignedPlist], nil);
  STAssertFalse([plistSigner isPlistSigned], nil);
  STAssertEqualObjects([plistSigner plist], plist, nil);
}

- (void)testSigningEmpty {
  [self ensureUnsignedPlist:[NSDictionary dictionary]];
}

- (void)testSigningOneKey {
  NSDictionary *plist = [NSDictionary dictionaryWithObject:@"foo"
                                                    forKey:@"bar"];
  [self ensureUnsignedPlist:plist];
}

- (void)testSigningMultipleKeys {
  NSDictionary *plist = [NSDictionary dictionaryWithObjectsAndKeys:
                         @"foo", @"bar",
                         @"baz", @"quux",
                         @"blah", @"greeble",
                         nil];
  [self ensureUnsignedPlist:plist];
}

- (void)testRulesPlist {
  NSDictionary *plist = [kSignedPlist propertyList];
  PlistSigner *plistSigner = [[[PlistSigner alloc]
                               initWithSigner:signer_
                               plist:plist] autorelease];
  STAssertNotNil(plistSigner, nil);
  STAssertTrue([plistSigner isPlistSigned], nil);
}

@end
