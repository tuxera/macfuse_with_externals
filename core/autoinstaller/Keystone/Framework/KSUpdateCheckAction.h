//
//  KSUpdateCheckAction.h
//
//  Created by John Grabowski on 1/30/08
//  Copyright 2008 Google Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import "KSAction.h"

@class KSFetcherFactory;
@class KSServer;
@class GTMHTTPFetcher;
@class KSFetcherFactory;

// Protocol for a delegate which receives error messages.  Currently
// fetcher errors are logged and thrown away.  (An error here has the
// functional meaning "do nothing more".)  Use of a delegate with this
// protocol in KSUpdateCheckAction is optional.
@protocol KSUpdateCheckActionDelegateProtocol
- (void)fetcher:(GTMHTTPFetcher *)fetcher failedWithError:(NSError *)error;
@end


// The KSUpdateCheckAction class checks for updates.  Its input consists of:
// - a KSServer which encapsulates the server communication;
// - an array of tickets, represting local installs which may need
//   updating; and
// - an optional fetcher factory which encapsulates a
//   request/response (e.g. loading of a URL request).
// All tickets must point to the same server URL.
//
// If there are updates to perform, the KSUpdateCheckAction will take
// the KSActions generated by its KSServer, presumably
// KSUpdateActions, and place them on it's own action processor.  This
// class will finish (call the KSActionProcessor's
// finishedProcessing:successfully:) when done deciding what to do,
// which may be before its "child" KSUpdateActions have completed.
// 
// This class is the only interface that KSKeystone will use for
// server communication.  It is expected that KSKeystone will create a
// KSUpdateCheckAction for each unique server URL seen in a ticket
// store.
@interface KSUpdateCheckAction : KSAction {
 @private
  KSFetcherFactory *fetcherFactory_;
  KSServer *server_;
  NSArray *tickets_;

  // Array of fetchers we have created.  Size of this array is the
  // number of outstanding requests.
  NSMutableArray *fetchers_;
  
  // If any request is unsucessful, this is set to NO.
  BOOL allSuccessful_;

  // Send error messages to this delegate.  Use of a delegate is
  // optional.
  id<KSUpdateCheckActionDelegateProtocol> delegate_;  // weak
}

+ (id)checkerWithServer:(KSServer *)server tickets:(NSArray *)tickets;

// Calls through to designated initializer with a new instance of
// GTMHTTPFetcher.  This is the standard initailizer that you will
// almost always want to use.  |tickets|, an array of KSTickets, are
// required to all point to the same server URL.
- (id)initWithServer:(KSServer *)server tickets:(NSArray *)tickets;

// Designated initializer. Can be useful because a mock fetcher can be
// "injected" into the instance when testing.
- (id)initWithFetcherFactory:(KSFetcherFactory *)fetcherFactory
                      server:(KSServer *)server
                     tickets:(NSArray *)tickets;

// Return the number of outstanding requests.  Servers may have
// more than one outstanding request each.
- (int)outstandingRequests;

// Set a delegate to be called when errors happen.  This isn't
// expected to be used except for unit tests.
- (void)setDelegate:(id<KSUpdateCheckActionDelegateProtocol>)delegate;

@end


